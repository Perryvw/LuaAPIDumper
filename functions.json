"_G" : 
{
    "rawget" : "No description",
    "SendToConsole" : "void SendToConsole(string)\n Send a string to the console as a client command",
    "BeginScriptDebug" : "No description",
    "_PublishedHelp" : 
    {
    },
    "APIDumper" : 
    {
        "Init" : "No description",
        "DumpCons" : "No description",
        "Dump" : "No description"
    },
    "UTIL_MessageTextAll_WithContext" : "void UTIL_MessageTextAll_WithContext(string, int, int, int, int, handle)\n Sends colored text to all clients. (Valid context keys: player_id, value, team_id)",
    "bit" : 
    {
        "rol" : "No description",
        "rshift" : "No description",
        "ror" : "No description",
        "bswap" : "No description",
        "bxor" : "No description",
        "bor" : "No description",
        "arshift" : "No description",
        "bnot" : "No description",
        "tobit" : "No description",
        "lshift" : "No description",
        "tohex" : "No description",
        "band" : "No description"
    },
    "RandomVector" : "Vector RandomVector(float)\n Get a random 2D vector of the given length.",
    "CreateEffect" : "bool CreateEffect(handle)\n Pass table - Inputs: entity, effect",
    "RotationDelta" : "QAngle RotationDelta(QAngle, QAngle)\n Find the delta between two QAngles.",
    "tonumber" : "No description",
    "CDOTABaseAbility" : 
    {
        "GetAnimationIgnoresModelScale" : "bool GetAnimationIgnoresModelScale()\n ",
        "GetAbilityIndex" : "int GetAbilityIndex()\n ",
        "OnHeroLevelUp" : "void OnHeroLevelUp()\n ",
        "ToggleAutoCast" : "void ToggleAutoCast()\n ",
        "GetDuration" : "float GetDuration()\n ",
        "IsChanneling" : "bool IsChanneling()\n Returns whether the ability is currently channeling.",
        "GetAbilityTargetType" : "int GetAbilityTargetType()\n ",
        "GetAbilityName" : "string GetAbilityName()\n Returns the name of this ability.",
        "PlaysDefaultAnimWhenStolen" : "bool PlaysDefaultAnimWhenStolen()\n ",
        "IsActivated" : "bool IsActivated()\n ",
        "OnAbilityPhaseInterrupted" : "void OnAbilityPhaseInterrupted()\n ",
        "SetHidden" : "void SetHidden(bool)\n ",
        "IsPassive" : "bool IsPassive()\n ",
        "GetCastRange" : "int GetCastRange()\n Gets the cast range of the ability.",
        "GetBackswingTime" : "float GetBackswingTime()\n ",
        "SpeakAbilityConcept" : "void SpeakAbilityConcept(int)\n ",
        "GetCooldownTime" : "float GetCooldownTime()\n ",
        "PayManaCost" : "void PayManaCost()\n ",
        "GetAssociatedSecondaryAbilities" : "string GetAssociatedSecondaryAbilities()\n ",
        "GetStolenActivityModifier" : "string GetStolenActivityModifier()\n ",
        "SpeakTrigger" : "bool SpeakTrigger()\n ",
        "GetAbilityDamage" : "int GetAbilityDamage()\n ",
        "GetModifierValue" : "float GetModifierValue()\n ",
        "GetCursorTargetingNothing" : "bool GetCursorTargetingNothing()\n ",
        "GetCooldownTimeRemaining" : "float GetCooldownTimeRemaining()\n ",
        "GetChannelStartTime" : "float GetChannelStartTime()\n ",
        "GetCaster" : "handle GetCaster()\n ",
        "GetToggleState" : "bool GetToggleState()\n ",
        "OnAbilityPinged" : "void OnAbilityPinged()\n ",
        "EndCooldown" : "void EndCooldown()\n Clear the cooldown remaining on this ability.",
        "GetCooldown" : "float GetCooldown(int)\n Get the cooldown duration for this ability at a given level, not the amount of cooldown actually left.",
        "ToggleAbility" : "void ToggleAbility()\n ",
        "IsHiddenWhenStolen" : "bool IsHiddenWhenStolen()\n ",
        "OnSpellStart" : "void OnSpellStart()\n ",
        "CastAbility" : "void CastAbility()\n ",
        "GetChannelledManaCostPerSecond" : "int GetChannelledManaCostPerSecond(int)\n ",
        "GetIntrinsicModifierName" : "string GetIntrinsicModifierName()\n ",
        "IsOwnersGoldEnough" : "bool IsOwnersGoldEnough(int)\n ",
        "IsHidden" : "bool IsHidden()\n ",
        "GetLevelSpecialValueFor" : "table GetLevelSpecialValueFor(string, int)\n ",
        "GetGoldCost" : "int GetGoldCost(int)\n ",
        "SetChanneling" : "void SetChanneling(bool)\n ",
        "IsInAbilityPhase" : "bool IsInAbilityPhase()\n Returns whether the ability is currently casting.",
        "SetAbilityIndex" : "void SetAbilityIndex(int)\n ",
        "SetInAbilityPhase" : "void SetInAbilityPhase(bool)\n ",
        "GetAbilityDamageType" : "int GetAbilityDamageType()\n ",
        "IsCooldownReady" : "bool IsCooldownReady()\n ",
        "IsToggle" : "bool IsToggle()\n ",
        "GetCastPoint" : "float GetCastPoint()\n ",
        "OnUpgrade" : "void OnUpgrade()\n ",
        "GetAutoCastState" : "bool GetAutoCastState()\n ",
        "GetSpecialValueFor" : "table GetSpecialValueFor(string)\n Gets a value from this ability's special value block for its current level.",
        "DecrementModifierRefCount" : "void DecrementModifierRefCount()\n ",
        "GetAbilityType" : "int GetAbilityType()\n ",
        "UseResources" : "void UseResources(bool, bool, bool)\n ",
        "IsAttributeBonus" : "bool IsAttributeBonus()\n ",
        "IncrementModifierRefCount" : "void IncrementModifierRefCount()\n ",
        "MarkAbilityButtonDirty" : "void MarkAbilityButtonDirty()\n Mark the ability button for this ability as needing a refresh.",
        "OnChannelThink" : "void OnChannelThink(float)\n ",
        "GetAbilityTargetFlags" : "int GetAbilityTargetFlags()\n ",
        "HeroXPChange" : "bool HeroXPChange(float)\n ",
        "SetOverrideCastPoint" : "void SetOverrideCastPoint(float)\n ",
        "OnHeroCalculateStatBonus" : "void OnHeroCalculateStatBonus()\n ",
        "GetChannelTime" : "float GetChannelTime()\n ",
        "CreateVisibilityNode" : "void CreateVisibilityNode(Vector, float, float)\n ",
        "ResetToggleOnRespawn" : "bool ResetToggleOnRespawn()\n ",
        "GetPlaybackRateOverride" : "float GetPlaybackRateOverride()\n ",
        "IsStealable" : "bool IsStealable()\n ",
        "EndChannel" : "void EndChannel(bool)\n ",
        "GetGoldCostForUpgrade" : "int GetGoldCostForUpgrade(int)\n ",
        "PayGoldCostForUpgrade" : "void PayGoldCostForUpgrade()\n ",
        "OnAbilityPhaseStart" : "bool OnAbilityPhaseStart()\n ",
        "UpgradeAbility" : "void UpgradeAbility()\n ",
        "SetActivated" : "void SetActivated(bool)\n ",
        "ShouldUseResources" : "bool ShouldUseResources()\n ",
        "GetAssociatedPrimaryAbilities" : "string GetAssociatedPrimaryAbilities()\n ",
        "IsOwnersGoldEnoughForUpgrade" : "bool IsOwnersGoldEnoughForUpgrade()\n ",
        "GetManaCost" : "int GetManaCost(int)\n ",
        "GetModifierValueBonus" : "float GetModifierValueBonus()\n ",
        "OnOwnerDied" : "void OnOwnerDied()\n ",
        "IsSharedWithTeammates" : "bool IsSharedWithTeammates()\n ",
        "GetMaxLevel" : "int GetMaxLevel()\n ",
        "PayGoldCost" : "void PayGoldCost()\n ",
        "OnOwnerSpawned" : "void OnOwnerSpawned()\n ",
        "OnChannelFinish" : "void OnChannelFinish(bool)\n ",
        "GetConceptRecipientType" : "int GetConceptRecipientType()\n ",
        "GetAbilityTargetTeam" : "int GetAbilityTargetTeam()\n ",
        "GetBehavior" : "int GetBehavior()\n ",
        "GetSharedCooldownName" : "string GetSharedCooldownName()\n ",
        "ContinueCasting" : "bool ContinueCasting()\n ",
        "GetCloneSource" : "handle GetCloneSource()\n ",
        "IsStolen" : "bool IsStolen()\n ",
        "IsOwnersManaEnough" : "bool IsOwnersManaEnough()\n ",
        "SetLevel" : "void SetLevel(int)\n Sets the level of this ability.",
        "GetCursorTarget" : "handle GetCursorTarget()\n ",
        "NumModifiersUsingAbility" : "int NumModifiersUsingAbility()\n ",
        "SetRefCountsModifiers" : "void SetRefCountsModifiers(bool)\n ",
        "RefCountsModifiers" : "bool RefCountsModifiers()\n ",
        "IsFullyCastable" : "bool IsFullyCastable()\n Returns whether the ability can be cast.",
        "GetHeroLevelRequiredToUpgrade" : "int GetHeroLevelRequiredToUpgrade()\n ",
        "IsNull" : "No description",
        "SetStolen" : "void SetStolen(bool)\n ",
        "GetLevel" : "int GetLevel()\n Get the current level of the ability.",
        "IsItem" : "bool IsItem()\n ",
        "ProcsMagicStick" : "bool ProcsMagicStick()\n ",
        "StartCooldown" : "void StartCooldown(float)\n ",
        "RefundManaCost" : "void RefundManaCost()\n ",
        "GetCursorPosition" : "Vector GetCursorPosition()\n ",
        "IsTrained" : "bool IsTrained()\n ",
        "IsCosmetic" : "bool IsCosmetic()\n ",
        "OnToggle" : "void OnToggle()\n "
    },
    "UTIL_ResetMessageTextAll" : "void UTIL_ResetMessageTextAll()\n Clear all message text from all clients.",
    "cvar_getf" : "float cvar_getf(string)\n Gets the value of the given cvar, as a float.",
    "debug" : 
    {
        "setupvalue" : "No description",
        "getregistry" : "No description",
        "traceback" : "No description",
        "setlocal" : "No description",
        "getfenv" : "No description",
        "getlocal" : "No description",
        "upvaluejoin" : "No description",
        "getupvalue" : "No description",
        "setfenv" : "No description",
        "setmetatable" : "No description",
        "sethook" : "No description",
        "gethook" : "No description",
        "debug" : "No description",
        "getmetatable" : "No description",
        "getinfo" : "No description",
        "upvalueid" : "No description"
    },
    "PauseGame" : "void PauseGame(bool)\n Pause or unpause the game.",
    "RemoveSpawnGroupFilterProxy" : "void RemoveSpawnGroupFilterProxy(string)\n Remove the C proxy for a script-based spawn group filter",
    "__VScriptServerDebugHook" : "No description",
    "DumpSpawnGroupEntityFilters" : "No description",
    "EntityUtils" : 
    {
        "GetClassFieldType" : "No description",
        "GetRootScriptClass" : "No description"
    },
    "dumpObjectCons" : "No description",
    "PlayerResource" : 
    {
    },
    "VectorToAngles" : "QAngle VectorToAngles(Vector)\n Get Qangles (with no roll) for a Vector.",
    "debugoverlay" : 
    {
    },
    "CScriptPrecacheContext" : 
    {
        "IsNull" : "No description",
        "GetValue" : "table GetValue(string)\n Reads a spawn key",
        "AddResource" : "void AddResource(string)\n Precaches a specific resource"
    },
    "dumpObjectFunc" : "No description",
    "CDOTAVoteSystem" : 
    {
        "IsNull" : "No description",
        "StartVote" : "void StartVote(handle)\n Starts a vote, based upon a table of parameters"
    },
    "GameRules" : 
    {
    },
    "CDOTAGamerules" : 
    {
        "SetPostGameTime" : "void SetPostGameTime(float)\n Sets the amount of time players have between the game ending and the server disconnecting them.",
        "State_Get" : "<unknown> State_Get()\n Get the current Gamerules state",
        "MakeTeamLose" : "void MakeTeamLose(int)\n Makes ths specified team lose",
        "Defeated" : "void Defeated()\n Kills the ancient, etc.",
        "ResetToHeroSelection" : "void ResetToHeroSelection()\n Restart the game at hero selection",
        "SendCustomMessage" : "void SendCustomMessage(string, int, int)\n Sends a string to the defined team.",
        "IsNull" : "No description",
        "SetCreepMinimapIconScale" : "void SetCreepMinimapIconScale(float)\n (flMinimapCreepIconScale) - Scale the creep icons on the minimap.",
        "GetNianFightStartTime" : "float GetNianFightStartTime()\n Gets the start time for the Nian fight",
        "NumDroppedItems" : "int NumDroppedItems()\n Returns the number of items currently dropped on the ground",
        "SetGoldTickTime" : "void SetGoldTickTime(float)\n Set the time interval between auto gold increases.",
        "AddMinimapDebugPoint" : "void AddMinimapDebugPoint(int, Vector, int, int, int, int, float)\n Add a point on the minimap.",
        "GetMatchSignoutComplete" : "bool GetMatchSignoutComplete()\n Have we received the post match signout message that includes reward information",
        "SetCustomGameEndDelay" : "void SetCustomGameEndDelay(float)\n Sets the game end delay.",
        "GetDifficulty" : "int GetDifficulty()\n Returns difficulty level of the custom game mode",
        "ResetDefeated" : "void ResetDefeated()\n Restart after killing the ancient, etc.",
        "SetCustomVictoryMessageDuration" : "void SetCustomVictoryMessageDuration(float)\n Sets the victory message duration.",
        "GetNianTotalDamageTaken" : "int GetNianTotalDamageTaken()\n For New Bloom, get total damage taken by the Nian / Year Beast",
        "SetHeroRespawnEnabled" : "void SetHeroRespawnEnabled(bool)\n Control if the normal DOTA hero respawn rules apply.",
        "SetGameWinner" : "void SetGameWinner(int)\n Makes ths specified team win",
        "SetHeroSelectionTime" : "void SetHeroSelectionTime(float)\n Sets the amount of time players have to pick their hero.",
        "SetUseUniversalShopMode" : "void SetUseUniversalShopMode(bool)\n When true, all items are available at as long as any shop is in range.",
        "SetCustomGameDifficulty" : "void SetCustomGameDifficulty(int)\n Set the difficulty level of the custom game mode",
        "SetCustomVictoryMessage" : "void SetCustomVictoryMessage(string)\n Sets the victory message.",
        "SetUseCustomHeroXPValues" : "void SetUseCustomHeroXPValues(bool)\n Allows heroes in the map to give a specific amount of XP (this value must be set).",
        "Playtesting_UpdateAddOnKeyValues" : "void Playtesting_UpdateAddOnKeyValues()\n Updates custom hero, unit and ability KeyValues in memory with the latest values from disk",
        "SetHeroMinimapIconScale" : "void SetHeroMinimapIconScale(float)\n (flMinimapHeroIconScale) - Scale the hero minimap icons on the minimap.",
        "GetDroppedItem" : "handle GetDroppedItem(int)\n Gets the Xth dropped item",
        "SetHideKillMessageHeaders" : "void SetHideKillMessageHeaders(bool)\n Sets whether the multikill, streak, and first-blood banners appear at the top of the screen.",
        "SetTreeRegrowTime" : "void SetTreeRegrowTime(float)\n Sets the tree regrow time in seconds.",
        "SetFirstBloodActive" : "void SetFirstBloodActive(bool)\n Sets whether First Blood has been triggered.",
        "GetGameModeEntity" : "handle GetGameModeEntity()\n Get the game mode entity",
        "DidMatchSignoutTimeOut" : "bool DidMatchSignoutTimeOut()\n true when we have waited some time after end of the game and not received signout",
        "SetTimeOfDay" : "void SetTimeOfDay(float)\n Set the time of day.",
        "GetCustomGameDifficulty" : "int GetCustomGameDifficulty()\n Returns the difficulty level of the custom game mode",
        "SetOverlayHealthBarUnit" : "void SetOverlayHealthBarUnit(handle, int)\n Show this unit's health on the overlay health bar",
        "GetGameTime" : "float GetGameTime()\n Returns the number of seconds elapsed since map start. This time doesn't count up when the game is paused",
        "SetGoldPerTick" : "void SetGoldPerTick(int)\n Set the auto gold increase per timed interval.",
        "IsDaytime" : "bool IsDaytime()\n Is it day time.",
        "SetSameHeroSelectionEnabled" : "void SetSameHeroSelectionEnabled(bool)\n When true, players can repeatedly pick the same hero.",
        "SetPreGameTime" : "void SetPreGameTime(float)\n Sets the amount of time players have between picking their hero and game start.",
        "SetRuneSpawnTime" : "void SetRuneSpawnTime(float)\n Sets the amount of time between rune spawns.",
        "SetNianFightStartTime" : "void SetNianFightStartTime(float)\n Sets the start time for the Nian fight",
        "SetUseBaseGoldBountyOnHeroes" : "void SetUseBaseGoldBountyOnHeroes(bool)\n Heroes will use the basic NPC functionality for determining their bounty, rather than DOTA specific formulas.",
        "SetSafeToLeave" : "void SetSafeToLeave(bool)\n (bSafeToLeave) - Mark this game as safe to leave.",
        "GetTimeOfDay" : "float GetTimeOfDay()\n Get the time of day",
        "SetRuneMinimapIconScale" : "void SetRuneMinimapIconScale(float)\n (flMinimapRuneIconScale) - Scale the rune icons on the minimap."
    },
    "h" : "No description",
    "c" : 
    {
        "describe_R" : "No description",
        "__initprops__" : 
        {
        },
        "inspect" : "No description",
        "__getbase__" : "No description",
        "__getclass__" : "No description",
        "__instanceof__" : "No description",
        "constructor" : "No description",
        "Specification" : 
        {
        }
    },
    "g_reloadState" : 
    {
        "coroutine" : 
        {
            "wrap" : "No description",
            "yield" : "No description",
            "status" : "No description",
            "resume" : "No description",
            "running" : "No description",
            "create" : "No description"
        },
        "package" : 
        {
            "preload" : 
            {
            },
            "loaded" : 
            {
                "io" : 
                {
                    "input" : "No description",
                    "tmpfile" : "No description",
                    "read" : "No description",
                    "output" : "No description",
                    "open" : "No description",
                    "close" : "No description",
                    "write" : "No description",
                    "popen" : "No description",
                    "flush" : "No description",
                    "type" : "No description",
                    "lines" : "No description"
                },
                "math" : 
                {
                    "ceil" : "No description",
                    "tan" : "No description",
                    "log10" : "No description",
                    "randomseed" : "No description",
                    "cos" : "No description",
                    "sinh" : "No description",
                    "random" : "No description",
                    "mod" : "No description",
                    "max" : "No description",
                    "atan2" : "No description",
                    "ldexp" : "No description",
                    "floor" : "No description",
                    "sqrt" : "No description",
                    "deg" : "No description",
                    "atan" : "No description",
                    "fmod" : "No description",
                    "acos" : "No description",
                    "pow" : "No description",
                    "abs" : "No description",
                    "min" : "No description",
                    "sin" : "No description",
                    "frexp" : "No description",
                    "log" : "No description",
                    "tanh" : "No description",
                    "exp" : "No description",
                    "modf" : "No description",
                    "cosh" : "No description",
                    "asin" : "No description",
                    "rad" : "No description"
                },
                "string" : 
                {
                    "format" : "No description",
                    "find" : "No description",
                    "lower" : "No description",
                    "rep" : "No description",
                    "gsub" : "No description",
                    "len" : "No description",
                    "gmatch" : "No description",
                    "dump" : "No description",
                    "match" : "No description",
                    "reverse" : "No description",
                    "byte" : "No description",
                    "char" : "No description",
                    "upper" : "No description",
                    "gfind" : "No description",
                    "sub" : "No description"
                },
                "table" : 
                {
                    "sort" : "No description",
                    "foreach" : "No description",
                    "remove" : "No description",
                    "foreachi" : "No description",
                    "maxn" : "No description",
                    "getn" : "No description",
                    "concat" : "No description",
                    "insert" : "No description"
                }
            },
            "seeall" : "No description",
            "loadlib" : "No description",
            "searchpath" : "No description",
            "loaders" : 
            {
                "1" : "No description",
                "2" : "No description"
            }
        }
    },
    "type" : "No description",
    "CMarkupVolumeTagged" : 
    {
        "IsNull" : "No description",
        "HasTag" : "bool HasTag(string)\n Does this volume have the given tag."
    },
    "AddToScriptHelp" : "No description",
    "GetFunctionSignature" : "No description",
    "VectorLerp" : "No description",
    "ScriptFunctionHelp" : "No description",
    "GridNav" : 
    {
    },
    "Say" : "void Say(handle, string, bool)\n Have Entity say string, and teamOnly or not",
    "ScriptDebugWatches" : 
    {
    },
    "DebugDrawText" : "void DebugDrawText(Vector, string, bool, float)\n Draw text in 3d (origin, text, bViewCheck, duration)",
    "EntityClassNameOverrides" : 
    {
    },
    "EntityLinkClasses" : 
    {
    },
    "_sourceline" : "No description",
    "EntityMixins" : 
    {
        "EnableDisable" : 
        {
            "Enable" : "No description",
            "Spawn" : "No description",
            "Disable" : "No description",
            "InstallMixin" : "No description",
            "Specification" : 
            {
                "meta" : 
                {
                    "enabled" : 
                    {
                    }
                },
                "inputs" : 
                {
                    "Enable" : 
                    {
                    },
                    "Disable" : 
                    {
                    }
                }
            }
        }
    },
    "DeepPrint" : "No description",
    "DeepToString" : "No description",
    "_DeepPrintTable" : "No description",
    "unpack" : "No description",
    "GetTeamHeroKills" : "int GetTeamHeroKills(int)\n ( int teamID )",
    "PrecacheResource" : "void PrecacheResource(string, string, handle)\n Manually precache a single resource",
    "assert" : "No description",
    "EmitSoundOnClient" : "void EmitSoundOnClient(string, handle)\n Play named sound only on the client for the passed in player",
    "_DeepPrintMetaTable" : "No description",
    "ParticleEffectControlPoints" : 
    {
        "__getbase__" : "No description",
        "__getclass__" : "No description",
        "__initprops__" : 
        {
        },
        "__instanceof__" : "No description"
    },
    "Merge" : "No description",
    "max" : "No description",
    "ProjectileManager" : 
    {
    },
    "min" : "No description",
    "CEntityInstance" : 
    {
        "GetEntityIndex" : "int GetEntityIndex()\n ",
        "DisconnectRedirectedOutput" : "void DisconnectRedirectedOutput(string, string, handle)\n Removes a connected script function from an I/O event on the passed entity.",
        "GetOrCreatePublicScriptScope" : "handle GetOrCreatePublicScriptScope()\n Retrieve, creating if necessary, the public script-side data associated with an entity",
        "IsNull" : "No description",
        "GetOrCreatePrivateScriptScope" : "handle GetOrCreatePrivateScriptScope()\n Retrieve, creating if necessary, the private per-instance script-side data associated with an entity",
        "GetPrivateScriptScope" : "handle GetPrivateScriptScope()\n Retrieve the private per-instance script-side data associated with an entity",
        "entindex" : "int entindex()\n ",
        "GetIntAttr" : "int GetIntAttr(string)\n Get Integer Attribute",
        "FireOutput" : "void FireOutput(string, handle, handle, table, float)\n Fire an entity output",
        "Destroy" : "void Destroy()\n ",
        "GetDebugName" : "string GetDebugName()\n Get the entity name w/help if not defined (i.e. classname/etc)",
        "SetIntAttr" : "void SetIntAttr(string, int)\n Set Integer Attribute",
        "GetClassname" : "string GetClassname()\n ",
        "GetName" : "string GetName()\n ",
        "ConnectOutput" : "void ConnectOutput(string, string)\n Adds an I/O connection that will call the named function on this entity when the specified output fires.",
        "RedirectOutput" : "void RedirectOutput(string, string, handle)\n Adds an I/O connection that will call the named function on the passed entity when the specified output fires.",
        "GetEntityHandle" : "ehandle GetEntityHandle()\n Get the entity as an EHANDLE",
        "DisconnectOutput" : "void DisconnectOutput(string, string)\n Removes a connected script function from an I/O event on this entity.",
        "RemoveSelf" : "void RemoveSelf()\n Delete this entity",
        "GetPublicScriptScope" : "handle GetPublicScriptScope()\n Retrieve the public script-side data associated with an entity"
    },
    "RemapVal" : "No description",
    "VectorDistance" : "No description",
    "SpawnEntityListFromTableAsynchronous" : "int SpawnEntityListFromTableAsynchronous(handle, handle)\n Asynchronously spawn an entity group from a list of spawn tables. A callback will be triggered when the spawning is complete",
    "Lerp" : "No description",
    "Clamp" : "No description",
    "rawequal" : "No description",
    "Rad2Deg" : "No description",
    "Deg2Rad" : "No description",
    "ClearSpawnGroupEntityFilters" : "No description",
    "RemoveSpawnGroupEntityFilter" : "No description",
    "next" : "No description",
    "RegisterSpawnGroupEntityFilter" : "No description",
    "SendFrostyPointsMessageToGC" : "void SendFrostyPointsMessageToGC(handle)\n ",
    "FrameTime" : "float FrameTime()\n Get the time spent on the server in the last frame",
    "CInfoData" : 
    {
        "QueryString" : "string QueryString(utlstringtoken, string)\n Query string data for this key",
        "QueryInt" : "int QueryInt(utlstringtoken, int)\n Query int data for this key",
        "QueryColor" : "Vector QueryColor(utlstringtoken, Vector)\n Query color data for this key",
        "QueryNumber" : "float QueryNumber(utlstringtoken, float)\n Query number data for this key",
        "IsNull" : "No description",
        "QueryVector" : "Vector QueryVector(utlstringtoken, Vector)\n Query vector data for this key",
        "QueryFloat" : "float QueryFloat(utlstringtoken, float)\n Query float data for this key"
    },
    "ScriptDebugAddTextFilter" : "No description",
    "DoUniqueString" : "string DoUniqueString(string)\n #UniqueString:Generate a string guaranteed to be unique across the life of the script VM, with an optional root string. Useful for adding data to tables when not sure what keys are already in use in that table.",
    "ScriptDebugTextDraw" : "No description",
    "ScriptDebugTextPrint" : "No description",
    "ScriptDebugTextTrace" : "No description",
    "ScriptDebugClearTraces" : "No description",
    "ScriptDebugRemoveTrace" : "No description",
    "ScriptDebugAddTrace" : "No description",
    "CNativeOutputs" : 
    {
        "Init" : "void Init(int)\n Initialize with number of outputs",
        "IsNull" : "No description",
        "AddOutput" : "void AddOutput(string, string)\n Add an output"
    },
    "ScriptDebugTraceAll" : "No description",
    "ScriptDebugClearWatches" : "No description",
    "ScriptDebugRemoveWatchPattern" : "No description",
    "ScriptDebugAddWatchPattern" : "No description",
    "ScriptDebugRemoveWatches" : "No description",
    "CDOTA_Item_DataDriven" : 
    {
        "IsNull" : "No description",
        "ApplyDataDrivenModifier" : "void ApplyDataDrivenModifier(handle, handle, string, handle)\n Applies a data driven modifier to the target"
    },
    "FireGameEvent" : "void FireGameEvent(string, handle)\n Fire a game event.",
    "RandomInt" : "int RandomInt(int, int)\n Get a random int within a range",
    "pairs" : "No description",
    "ScriptDebugAddWatch" : "No description",
    "loadfile" : "No description",
    "RemapValClamped" : "No description",
    "ScriptDebugTraces" : 
    {
    },
    "VectorDistanceSq" : "No description",
    "ExecuteOrderFromTable" : "void ExecuteOrderFromTable(handle)\n Issue an order from a script table",
    "ScriptDebugTextFilters" : 
    {
    },
    "ScriptDebugDefaultWatchColor" : 
    {
    },
    "CDesc" : 
    {
        "CPhysicsComponent" : 
        {
            "IsNull" : "No description",
            "ExpensiveInstantRayCast" : "bool ExpensiveInstantRayCast(Vector, Vector, handle)\n Do an instant (i.e. blocking) Ray Cast. Will do a handle/queue version later. Dont plan to use this for real!"
        },
        "CPointTemplate" : 
        {
            "GetSpawnedEntities" : "handle GetSpawnedEntities()\n GetSpawnedEntities() : Get the list of the most recent spawned entities",
            "ForceSpawn" : "void ForceSpawn()\n ForceSpawn() : Spawns all of the entities the point_template is pointing at.",
            "IsNull" : "No description",
            "SetSpawnCallback" : "void SetSpawnCallback(handle, handle)\n SetSpawnCallback( hCallbackFunc, hCallbackScope, hCallbackData ) : Set a callback for when the template spawns entities. The spawned entities will be passed in as an array.",
            "DeleteCreatedSpawnGroups" : "void DeleteCreatedSpawnGroups()\n DeleteCreatedSpawnGroups() : Deletes any spawn groups that this point_template has spawned. Note: The point_template will not be deleted by this."
        },
        "CDOTA_Item" : 
        {
            "GetInitialCharges" : "int GetInitialCharges()\n Get the initial number of charges this item has.",
            "GetShareability" : "int GetShareability()\n ",
            "GetCurrentCharges" : "int GetCurrentCharges()\n Get the number of charges this item currently has.",
            "GetPurchaser" : "handle GetPurchaser()\n Get the purchaser for this item.",
            "GetCost" : "int GetCost()\n ",
            "IsNull" : "No description",
            "GetPurchaseTime" : "float GetPurchaseTime()\n Get the purchase time of this item",
            "SetPurchaseTime" : "void SetPurchaseTime(float)\n Set the purchase time of this item",
            "SetPurchaser" : "void SetPurchaser(handle)\n Set the purchaser of record for this item.",
            "LaunchLoot" : "void LaunchLoot(bool, float, float, Vector)\n ",
            "Think" : "void Think()\n Think this item",
            "GetContainer" : "handle GetContainer()\n Get the container for this item.",
            "SetCurrentCharges" : "void SetCurrentCharges(int)\n Set the number of charges on this item",
            "IsPermanent" : "bool IsPermanent()\n Is this a permanent item?",
            "StacksWithOtherOwners" : "bool StacksWithOtherOwners()\n ",
            "SetStacksWithOtherOwners" : "void SetStacksWithOtherOwners(bool)\n "
        },
        "CBodyComponent" : 
        {
            "SetAnimation" : "void SetAnimation(string)\n Pass string for the animation to play on this model",
            "SetVelocity" : "void SetVelocity(Vector)\n ",
            "LookupSequence" : "<unknown> LookupSequence(string)\n Returns a sequence id given a name\n ",
            "SetBodyGroup" : "void SetBodyGroup(string)\n ",
            "AddImpulseAtPosition" : "void AddImpulseAtPosition(Vector, Vector)\n Apply an impulse at a worldspace position to the physics",
            "AddVelocity" : "void AddVelocity(Vector, Vector)\n Add linear and angular velocity to the physics object",
            "SetMaterialGroup" : "void SetMaterialGroup(utlstringtoken)\n ",
            "SetAngularVelocity" : "void SetAngularVelocity(Vector)\n ",
            "IsAttachedToParent" : "bool IsAttachedToParent()\n Is attached to parent",
            "DetachFromParent" : "void DetachFromParent()\n Detach from its parent",
            "IsNull" : "No description",
            "SequenceDuration" : "float SequenceDuration(string)\n Returns the duration in seconds of the specified sequence",
            "GetSequence" : "<unknown> GetSequence()\n Returns the active sequence\n "
        },
        "CBaseAnimating" : 
        {
            "GetAttachmentAngles" : "Vector GetAttachmentAngles(int)\n Get the attachement id's angles as a p,y,r vector.",
            "IsSequenceFinished" : "bool IsSequenceFinished()\n Ask whether the main sequence is done playing.",
            "ScriptLookupAttachment" : "int ScriptLookupAttachment(string)\n Get the named attachement id.",
            "IsNull" : "No description",
            "SetPoseParameter" : "float SetPoseParameter(string, float)\n Set the specified pose parameter to the specified value.",
            "SetModelScale" : "void SetModelScale(float)\n Set scale of entity's model.",
            "GetAttachmentOrigin" : "Vector GetAttachmentOrigin(int)\n Get the attachement id's origin vector.",
            "SetBodygroup" : "void SetBodygroup(int, int)\n Sets a bodygroup."
        },
        "CDOTAPlayer" : 
        {
            "GetControlledRPGUnit" : "handle GetControlledRPGUnit()\n Get the RPG unit this player controls.",
            "SetKillCamUnit" : "void SetKillCamUnit(handle)\n Set the kill cam unit for this hero.",
            "MakeRandomHeroSelection" : "void MakeRandomHeroSelection()\n Randoms this player's hero.",
            "GetAssignedHero" : "handle GetAssignedHero()\n Get the player's hero.",
            "IsNull" : "No description",
            "SetMusicStatus" : "void SetMusicStatus(int, float)\n (nMusicStatus, flIntensity) - Set the music status for this player, note this will only really apply if dota_music_battle_enable is off.",
            "GetPlayerID" : "int GetPlayerID()\n Get the player's official PlayerID; notably is -1 when the player isn't yet on a team."
        },
        "CBaseCombatCharacter" : 
        {
            "IsNull" : "No description",
            "GetEquippedWeapons" : "table GetEquippedWeapons()\n GetEquippedWeapons() : Returns an array of all the equipped weapons",
            "GetWeaponCount" : "int GetWeaponCount()\n GetWeaponCount() : Gets the number of weapons currently equipped"
        },
        "ProjectileManager" : 
        {
            "DestroyLinearProjectile" : "void DestroyLinearProjectile(int)\n Destroys the linear projectile matching the argument ID",
            "ProjectileDodge" : "void ProjectileDodge(handle)\n Makes the specified unit dodge projectiles",
            "IsNull" : "No description",
            "CreateLinearProjectile" : "int CreateLinearProjectile(handle)\n Creates a linear projectile and returns the projectile ID",
            "CreateTrackingProjectile" : "void CreateTrackingProjectile(handle)\n Creates a tracking projectile"
        },
        "CBaseTrigger" : 
        {
            "Enable" : "void Enable()\n Enable the trigger",
            "IsTouching" : "bool IsTouching(handle)\n Checks whether the passed entity is touching the trigger.",
            "IsNull" : "No description",
            "Disable" : "void Disable()\n Disable's the trigger"
        },
        "CDOTA_Ability_DataDriven" : 
        {
            "IsNull" : "No description",
            "ApplyDataDrivenModifier" : "void ApplyDataDrivenModifier(handle, handle, string, handle)\n Applies a data driven modifier to the target"
        },
        "CEnvEntityMaker" : 
        {
            "SpawnEntityAtNamedEntityOrigin" : "void SpawnEntityAtNamedEntityOrigin(string)\n Create an entity at the location of a named entity",
            "SpawnEntityAtLocation" : "void SpawnEntityAtLocation(Vector, Vector)\n Create an entity at a specified location and orientaton, orientation is Euler angle in degrees (pitch, yaw, roll)",
            "IsNull" : "No description",
            "SpawnEntityAtEntityOrigin" : "void SpawnEntityAtEntityOrigin(handle)\n Create an entity at the location of a specified entity instance",
            "SpawnEntity" : "void SpawnEntity()\n Create an entity at the location of the maker"
        },
        "CDOTA_BaseNPC_Creature" : 
        {
            "SetHPRegenGain" : "void SetHPRegenGain(float)\n Set the hit points regen gained per level on this creature.",
            "SetDisableResistanceGain" : "void SetDisableResistanceGain(float)\n Set the disable resistance gained per level on this creature.",
            "SetMoveSpeedGain" : "void SetMoveSpeedGain(int)\n Set the move speed gained per level on this creature.",
            "SetAttackTimeGain" : "void SetAttackTimeGain(float)\n Set the attack time gained per level on this creature.",
            "IsNull" : "No description",
            "IsChampion" : "bool IsChampion()\n Is this unit a champion?",
            "SetArmorGain" : "void SetArmorGain(float)\n Set the armor gained per level on this creature.",
            "CreatureLevelUp" : "void CreatureLevelUp(int)\n Level the creature up by the specified number of levels",
            "SetXPGain" : "void SetXPGain(int)\n Set the xp reward gained per level on this creature.",
            "AddItemDrop" : "void AddItemDrop(handle)\n Add the specified item drop to this creature",
            "SetManaRegenGain" : "void SetManaRegenGain(float)\n Set the mana points regen gained per level on this creature.",
            "SetDamageGain" : "void SetDamageGain(int)\n Set the damage gained per level on this creature.",
            "SetMagicResistanceGain" : "void SetMagicResistanceGain(float)\n Set the magic resistance gained per level on this creature.",
            "SetHPGain" : "void SetHPGain(int)\n Set the hit points gained per level on this creature.",
            "SetChampion" : "void SetChampion(bool)\n Flag this unit as a champion creature.",
            "SetManaGain" : "void SetManaGain(int)\n Set the mana points gained per level on this creature.",
            "SetBountyGain" : "void SetBountyGain(int)\n Set the bounty gold gained per level on this creature."
        },
        "CDOTA_Item_Physical" : 
        {
            "GetContainedItem" : "handle GetContainedItem()\n Returned the contained item.",
            "IsNull" : "No description",
            "GetCreationTime" : "float GetCreationTime()\n Returns the game time when this item was created in the world",
            "SetContainedItem" : "void SetContainedItem(handle)\n Set the contained item."
        },
        "CDOTA_Ability_Nian_Roar" : 
        {
            "IsNull" : "No description",
            "GetCastCount" : "int GetCastCount()\n Number of times Nian has used the roar"
        },
        "CDOTA_Unit_Nian" : 
        {
            "GetTail" : "handle GetTail()\n Is the Nian's tail broken?",
            "GetHorn" : "handle GetHorn()\n Is the Nian horn?",
            "IsNull" : "No description",
            "IsHornAlive" : "bool IsHornAlive()\n Is the Nian's horn broken?",
            "IsTailAlive" : "bool IsTailAlive()\n Is the Nian's tail broken?"
        },
        "CRPG_Unit" : 
        {
            "SetSightConeAngle" : "void SetSightConeAngle(float)\n ( flAngleDegrees ) - sets angle in which the unit can see things up to sight range",
            "GetMaxStamina" : "float GetMaxStamina()\n () - returns maximum stamina amount.",
            "SetBlocking" : "void SetBlocking(bool)\n ( bShouldBlock ) - Set the blocking state of this unit.",
            "IsNull" : "No description",
            "GetStamina" : "float GetStamina()\n () - returns current stamina amount.",
            "SetMaxSpeed" : "void SetMaxSpeed(float)\n ( flMaxSpeed ) - sets unit's max speed",
            "SetMovementTargetEntity" : "void SetMovementTargetEntity(handle, float)\n ( hTargetEntity, flTargetRange ) - Try to move this unit to the given range from the target entity.",
            "GetSightConeAngle" : "float GetSightConeAngle()\n () - returns angle in which the unit can see things up to sight range",
            "SetFacingTargetPosition" : "void SetFacingTargetPosition(Vector)\n ( vecTargetPosition ) - This unit will turn to face towards the specified position",
            "GetTurnRate" : "float GetTurnRate()\n () - returns unit's turn rate in degrees per second",
            "ArrivedAtMovementTarget" : "bool ArrivedAtMovementTarget()\n Returns whether this unit has reached its movement target.",
            "IsFacing" : "bool IsFacing(Vector, float)\n ( vecTargetPosition, flAngleTolerance ) - returns true if the unit is within flAngleTolerance degrees of the target position",
            "IsControlledByPlayer" : "bool IsControlledByPlayer()\n () - is this unit controlled by a human player?",
            "GetSightCone2DRange" : "float GetSightCone2DRange()\n () - returns 2D range of unit's sight cone",
            "GetSensingCylinderVerticalRange" : "float GetSensingCylinderVerticalRange()\n () - returns max height difference between unit and sensed units",
            "IsSprinting" : "bool IsSprinting()\n () - returns true if unit is sprinting",
            "ActionState" : "handle ActionState()\n () - return the ActionState object for this unit.",
            "FindSensedEnemies" : "table FindSensedEnemies()\n () - returns list of all enemy units within this unit's sight cone or sensing sphere",
            "GetUnitName" : "string GetUnitName()\n () - get the unit name for this unit.",
            "SetSensingCylinderRadius" : "void SetSensingCylinderRadius(float)\n ( flRadius ) - set radius of unit's 360 degree sensing cylinder",
            "GetFacingTargetEntity" : "handle GetFacingTargetEntity()\n Returns the facing target entity, if set.",
            "GetLeashDistance" : "float GetLeashDistance()\n () - returns max distance unit will run from spawn point before retreating",
            "SetLeashDistance" : "void SetLeashDistance(float)\n ( flDistance ) - set max distance unit will run from spawn point before retreating",
            "GetMovementTargetPosition" : "Vector GetMovementTargetPosition()\n () - Return movement target position, if none is set, vec3_invalid is returned",
            "ClearFacingTarget" : "void ClearFacingTarget()\n () - Clear any facing target entity/position.",
            "SetSprinting" : "void SetSprinting(bool)\n ( bSprinting ) - set if this unit is sprinting or not",
            "GetMovementTargetEntity" : "handle GetMovementTargetEntity()\n Returns the movement target entity, if set.",
            "SetSightConeVerticalRange" : "void SetSightConeVerticalRange(float)\n ( fRange ) - set vertical range of unit's sight cone",
            "GetSightConeVerticalRange" : "float GetSightConeVerticalRange()\n () - returns vertical range of unit's sight cone",
            "SetSensingCylinderVerticalRange" : "void SetSensingCylinderVerticalRange(float)\n ( flRange ) - set max height difference between unit and sensed units",
            "GrantItem" : "void GrantItem(string, bool)\n ( sItemName, bEquip ) - grant an item to the unit by name.",
            "SetTurnRate" : "void SetTurnRate(float)\n ( flTurnRate ) - sets unit's turn rate in degrees per second",
            "IsBlocking" : "bool IsBlocking()\n () - is this unit blocking?",
            "SetSightCone2DRange" : "void SetSightCone2DRange(float)\n ( fRange ) - set 2D range of unit's sight cone",
            "GetMaxRunSpeed" : "float GetMaxRunSpeed()\n () - returns unit's max run speed",
            "SetFacingTargetEntity" : "void SetFacingTargetEntity(handle)\n ( hTargetEntity ) - This unit will turn to face towards the target entity.",
            "GetMaxSpeed" : "float GetMaxSpeed()\n () - returns unit's max speed",
            "FindSensedFriendlies" : "table FindSensedFriendlies()\n () - returns list of all enemy units within this unit's sight cone or sensing sphere",
            "SetMaxRunSpeed" : "void SetMaxRunSpeed(float)\n ( flMaxSpeed ) - sets unit's max run speed",
            "GetSensingCylinderRadius" : "float GetSensingCylinderRadius()\n () - returns radius of unit's 360 degree sensing cylinder",
            "SetMovementTargetPosition" : "void SetMovementTargetPosition(Vector, float)\n ( vecTargetPosition, flTargetRange ) - Try to move this unit to the given range from the target point.",
            "ClearMovementTarget" : "void ClearMovementTarget()\n () - Clear any movement target entity/position."
        },
        "CScriptKeyValues" : 
        {
            "IsNull" : "No description",
            "GetValue" : "table GetValue(string)\n Reads a spawn key"
        },
        "CScriptHeroList" : 
        {
            "GetHero" : "handle GetHero(int)\n Get the Nth hero in the Hero List",
            "GetAllHeroes" : "table GetAllHeroes()\n Returns all the heroes in the world",
            "IsNull" : "No description",
            "GetHeroCount" : "int GetHeroCount()\n Returns the number of heroes in the world"
        },
        "CBasePlayer" : 
        {
            "IsNull" : "No description",
            "IsNoclipping" : "bool IsNoclipping()\n Returns true if the player is in noclip mode."
        },
        "CDOTA_MapTree" : 
        {
            "CutDownRegrowAfter" : "void CutDownRegrowAfter(float, int)\n Cuts down this tree. Parameters: float flRegrowAfter (-1 = never regrow), int nTeamNumberKnownTo (-1 = invalid team)",
            "IsStanding" : "bool IsStanding()\n Returns true if the tree is standing, false if it has been cut down",
            "IsNull" : "No description",
            "GrowBack" : "void GrowBack()\n Grows back the tree if it was cut down.",
            "CutDown" : "void CutDown(int)\n Cuts down this tree. Parameters: int nTeamNumberKnownTo (-1 = invalid team)"
        },
        "CEnvProjectedTexture" : 
        {
            "SetVolumetrics" : "void SetVolumetrics(bool, float, float, int, float)\n Turn on/off light volumetrics: bool bOn, float flIntensity, float flNoise, int nPlanes, float flPlaneOffset",
            "SetLinearAttenuation" : "void SetLinearAttenuation(float)\n Set light linear attenuation value",
            "SetQuadraticAttenuation" : "void SetQuadraticAttenuation(float)\n Set light quadratic attenuation value",
            "IsNull" : "No description",
            "SetNearRange" : "void SetNearRange(float)\n Set light minimum range",
            "SetFarRange" : "void SetFarRange(float)\n Set light maximum range"
        },
        "CDOTA_Ability_Nian_Leap" : 
        {
            "IsNull" : "No description",
            "SetPlaybackRate" : "void SetPlaybackRate(float)\n Override playbackrate"
        },
        "CLogicScript" : 
        {
            "IsNull" : "No description"
        },
        "CDOTA_Ability_Animation_Attack" : 
        {
            "IsNull" : "No description",
            "SetPlaybackRate" : "void SetPlaybackRate(float)\n Override playbackrate"
        },
        "CDOTA_Ability_Animation_TailSpin" : 
        {
            "IsNull" : "No description",
            "SetPlaybackRate" : "void SetPlaybackRate(float)\n Override playbackrate"
        },
        "CPhysicsProp" : 
        {
            "IsNull" : "No description",
            "DisableMotion" : "void DisableMotion()\n Enable motion for the prop",
            "EnableMotion" : "void EnableMotion()\n Enable motion for the prop"
        },
        "Convars" : 
        {
            "GetFloat" : "table GetFloat(string)\n GetFloat(name) : returns the convar as a float. May return null if no such convar.",
            "GetStr" : "table GetStr(string)\n GetStr(name) : returns the convar as a string. May return null if no such convar.",
            "SetStr" : "void SetStr(string, string)\n SetStr(name, val) : sets the value of the convar to the string.",
            "GetDOTACommandClient" : "handle GetDOTACommandClient()\n GetDOTACommandClient() : returns the DOTA player who issued this console command.",
            "GetCommandClient" : "handle GetCommandClient()\n GetCommandClient() : returns the player who issued this console command.",
            "SetInt" : "void SetInt(string, int)\n SetInt(name, val) : sets the value of the convar to the int.",
            "RegisterCommand" : "void RegisterCommand(string, handle, string, int)\n RegisterCommand(name, fn, helpString, flags) : register a console command.",
            "RegisterConvar" : "void RegisterConvar(string, string, string, int)\n RegisterConvar(name, defaultValue, helpString, flags): register a new console variable.",
            "SetBool" : "void SetBool(string, bool)\n SetBool(name, val) : sets the value of the convar to the bool.",
            "GetInt" : "table GetInt(string)\n GetInt(name) : returns the convar as an int. May return null if no such convar.",
            "SetFloat" : "void SetFloat(string, float)\n SetFloat(name, val) : sets the value of the convar to the float.",
            "IsNull" : "No description",
            "GetBool" : "table GetBool(string)\n GetBool(name) : returns the convar as a boolean flag."
        },
        "CDOTA_SimpleObstruction" : 
        {
            "IsNull" : "No description",
            "SetEnabled" : "void SetEnabled(bool, bool)\n Enable or disable the obstruction",
            "IsEnabled" : "bool IsEnabled()\n Returns whether the obstruction is currently active"
        },
        "CToneMapControllerComponent" : 
        {
            "GetMaxExposure" : "float GetMaxExposure()\n Gets max exposure for this tonemap controller",
            "SetMinExposure" : "void SetMinExposure(float)\n Sets min exposure for this tonemap controller",
            "SetBloomScale" : "void SetBloomScale(float)\n Sets bloom scale for this tonemap controller",
            "SetMaxExposure" : "void SetMaxExposure(float)\n Sets max exposure for this tonemap controller",
            "GetBloomScale" : "float GetBloomScale()\n Gets bloomscale for this tonemap controller",
            "IsNull" : "No description",
            "GetMinExposure" : "float GetMinExposure()\n Gets min exposure for this tonemap controller"
        },
        "CDOTABaseGameMode" : 
        {
            "SetCustomHeroMaxLevel" : "void SetCustomHeroMaxLevel(int)\n Allows definition of the max level heroes can achieve (default is 25).",
            "SetBuybackEnabled" : "void SetBuybackEnabled(bool)\n Enables or disables buyback completely.",
            "SetCustomXPRequiredToReachNextLevel" : "void SetCustomXPRequiredToReachNextLevel(handle)\n Allows definition of a table of hero XP values.",
            "GetCameraDistanceOverride" : "float GetCameraDistanceOverride()\n Set a different camera distance; dota default is 1134.",
            "IsNull" : "No description",
            "SetCustomBuybackCooldownEnabled" : "void SetCustomBuybackCooldownEnabled(bool)\n Turns on capability to define custom buyback cooldowns.",
            "SetTopBarTeamValuesOverride" : "void SetTopBarTeamValuesOverride(bool)\n Override the values of the team values on the top game bar.",
            "SetAlwaysShowPlayerInventory" : "void SetAlwaysShowPlayerInventory(bool)\n Show the player hero's inventory in the HUD, regardless of what unit is selected.",
            "SetTopBarTeamValue" : "void SetTopBarTeamValue(int, int)\n Set the team values on the top game bar.",
            "GetStashPurchasingDisabled" : "bool GetStashPurchasingDisabled()\n Turn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items.",
            "GetAlwaysShowPlayerInventory" : "bool GetAlwaysShowPlayerInventory()\n Show the player hero's inventory in the HUD, regardless of what unit is selected.",
            "GetTowerBackdoorProtectionEnabled" : "bool GetTowerBackdoorProtectionEnabled()\n Enables/Disables tower backdoor protection.",
            "SetGoldSoundDisabled" : "void SetGoldSoundDisabled(bool)\n Turn the sound when gold is acquired off/on.",
            "GetCustomBuybackCooldownEnabled" : "bool GetCustomBuybackCooldownEnabled()\n Turns on capability to define custom buyback cooldowns.",
            "SetAnnouncerDisabled" : "void SetAnnouncerDisabled(bool)\n Mutes the in-game announcers.",
            "GetFogOfWarDisabled" : "bool GetFogOfWarDisabled()\n Turn the fog of war on or off.",
            "SetOverrideSelectionEntity" : "void SetOverrideSelectionEntity(handle)\n Set an override for the default selection entity, instead of each player's hero.",
            "IsBuybackEnabled" : "bool IsBuybackEnabled()\n Enables or disables buyback completely.",
            "GetTopBarTeamValuesVisible" : "bool GetTopBarTeamValuesVisible()\n Turning on/off the team values on the top game bar.",
            "GetTopBarTeamValuesOverride" : "bool GetTopBarTeamValuesOverride()\n Override the values of the team values on the top game bar.",
            "GetGoldSoundDisabled" : "bool GetGoldSoundDisabled()\n Turn the sound when gold is acquired off/on.",
            "SetUseCustomHeroLevels" : "void SetUseCustomHeroLevels(bool)\n Turn on custom-defined XP values for hero level ups.  The table should be defined before switching this on.",
            "SetStashPurchasingDisabled" : "void SetStashPurchasingDisabled(bool)\n Turn purchasing items to the stash off/on. If purchasing to the stash is off the player must be at a shop to purchase items.",
            "GetAnnouncerDisabled" : "bool GetAnnouncerDisabled()\n Are in-game announcers disabled?",
            "SetCustomBuybackCostEnabled" : "void SetCustomBuybackCostEnabled(bool)\n Turns on capability to define custom buyback costs.",
            "GetRecommendedItemsDisabled" : "bool GetRecommendedItemsDisabled()\n Turn the panel for showing recommended items at the shop off/on.",
            "ClientLoadGridNav" : "void ClientLoadGridNav()\n Tell clients that they need to load gridnav information. Used for things like allowing clients to identify valid locations to place buildings.",
            "SetFogOfWarDisabled" : "void SetFogOfWarDisabled(bool)\n Turn the fog of war on or off.",
            "GetCustomHeroMaxLevel" : "int GetCustomHeroMaxLevel()\n Allows definition of the max level heroes can achieve (default is 25).",
            "SetHUDVisible" : "void SetHUDVisible(int, bool)\n Set the HUD element visibility.",
            "SetTowerBackdoorProtectionEnabled" : "void SetTowerBackdoorProtectionEnabled(bool)\n Enables/Disables tower backdoor protection.",
            "SetFixedRespawnTime" : "void SetFixedRespawnTime(float)\n Set a fixed delay for all players to respawn after.",
            "SetRemoveIllusionsOnDeath" : "void SetRemoveIllusionsOnDeath(bool)\n Make it so illusions are immediately removed upon death, rather than sticking around for a few seconds.",
            "GetCustomBuybackCostEnabled" : "bool GetCustomBuybackCostEnabled()\n Turns on capability to define custom buyback costs.",
            "GetUseCustomHeroLevels" : "bool GetUseCustomHeroLevels()\n Are custom-defined XP values for hero level ups in use?",
            "GetFixedRespawnTime" : "float GetFixedRespawnTime()\n Gets the fixed respawn time.",
            "SetRecommendedItemsDisabled" : "void SetRecommendedItemsDisabled(bool)\n Turn the panel for showing recommended items at the shop off/on.",
            "SetTopBarTeamValuesVisible" : "void SetTopBarTeamValuesVisible(bool)\n Turning on/off the team values on the top game bar.",
            "SetCameraDistanceOverride" : "void SetCameraDistanceOverride(float)\n Set a different camera distance; dota default is 1134."
        },
        "CDebugOverlayScriptHelper" : 
        {
            "VertArrow" : "void VertArrow(Vector, Vector, float, int, int, int, int, bool, float)\n Draws a vertical arrow. Specify endpoints in world space.",
            "Sphere" : "void Sphere(Vector, float, int, int, int, int, bool, float)\n Draws a wireframe sphere. Specify center in world space.",
            "YawArrow" : "void YawArrow(Vector, float, float, float, int, int, int, int, bool, float)\n Draws a arrow associated with a specific yaw. Specify endpoints in world space.",
            "Capsule" : "void Capsule(Vector, Quaternion, float, float, int, int, int, int, bool, float)\n Draws a capsule. Specify base in world space.",
            "SweptBox" : "void SweptBox(Vector, Vector, Vector, Vector, Quaternion, int, int, int, int, float)\n Draws a swept box. Specify endpoints in world space and the bounds in local space.",
            "EntitySkeleton" : "void EntitySkeleton(ehandle, float)\n Draws the skeleton of the entity",
            "IsNull" : "No description",
            "Line2D" : "void Line2D(Vector2D, Vector2D, int, int, int, int, float)\n Draws a line between two points in screenspace",
            "Texture" : "void Texture(string, Vector2D, Vector2D, int, int, int, int, Vector2D, Vector2D, float)\n Draws a screen-space texture. Coordinates are in pixels.",
            "RemoveAllInScope" : "void RemoveAllInScope(utlstringtoken)\n Removes all overlays marked with a specific identifier, regardless of their lifetime.",
            "Cross3D" : "void Cross3D(Vector, float, int, int, int, int, bool, float)\n Draws a world-aligned cross. Specify origin in world space.",
            "PushAndClearDebugOverlayScope" : "void PushAndClearDebugOverlayScope(utlstringtoken)\n Pushes an identifier used to group overlays. Deletes all existing overlays using this overlay id.",
            "Triangle" : "void Triangle(Vector, Vector, Vector, int, int, int, int, bool, float)\n Draws a filled triangle. Specify vertices in world space.",
            "Line" : "void Line(Vector, Vector, int, int, int, int, bool, float)\n Draws a line between two points",
            "BoxAngles" : "void BoxAngles(Vector, Vector, Vector, Quaternion, int, int, int, int, bool, float)\n Draws an oriented box at the origin. Specify bounds in local space.",
            "Axis" : "void Axis(Vector, Quaternion, float, bool, float)\n Draws an axis. Specify origin + orientation in world space.",
            "DrawTickMarkedLine" : "void DrawTickMarkedLine(Vector, Vector, float, int, int, int, int, int, bool, float)\n Draws a dashed line. Specify endpoints in world space.",
            "CircleScreenOriented" : "void CircleScreenOriented(Vector, float, int, int, int, int, bool, float)\n Draws a circle oriented to the screen. Specify center in world space.",
            "Cross" : "void Cross(Vector, float, int, int, int, int, bool, float)\n Draws a screen-aligned cross. Specify origin in world space.",
            "EntityText" : "void EntityText(ehandle, int, string, int, int, int, int, float)\n Draws text on an entity",
            "Circle" : "void Circle(Vector, Quaternion, float, int, int, int, int, bool, float)\n Draws a circle. Specify center in world space.",
            "EntityAttachments" : "void EntityAttachments(ehandle, float)\n Draws the attachments of the entity",
            "EntityAxis" : "void EntityAxis(ehandle, float, bool, float)\n Draws the axis of the entity origin",
            "Cone" : "void Cone(Vector, Vector, float, float, int, int, int, int, bool, float)\n Draws a wireframe cone. Specify endpoint and direction in world space.",
            "Box" : "void Box(Vector, Vector, int, int, int, int, bool, float)\n Draws a world-space axis-aligned box. Specify bounds in world space.",
            "EntityBounds" : "void EntityBounds(ehandle, int, int, int, int, bool, float)\n Draws bounds of an entity",
            "PopDebugOverlayScope" : "void PopDebugOverlayScope()\n Pops the identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch.",
            "FilledRect2D" : "void FilledRect2D(Vector2D, Vector2D, int, int, int, int, float)\n Draws a screen-space filled 2D rectangle. Coordinates are in pixels.",
            "VectorText3D" : "void VectorText3D(Vector, Quaternion, string, int, int, int, int, bool, float)\n Draws 3D text. Specify origin + orientation in world space.",
            "Cross3DOriented" : "void Cross3DOriented(Vector, Quaternion, float, int, int, int, int, bool, float)\n Draws an oriented cross. Specify origin in world space.",
            "SolidCone" : "void SolidCone(Vector, Vector, float, float, int, int, int, int, bool, float)\n Draws a solid cone. Specify endpoint and direction in world space.",
            "UnitTestCycleOverlayRenderType" : "void UnitTestCycleOverlayRenderType()\n Toggles the overlay render type, for unit tests",
            "HorzArrow" : "void HorzArrow(Vector, Vector, float, int, int, int, int, bool, float)\n Draws a horizontal arrow. Specify endpoints in world space.",
            "PushDebugOverlayScope" : "void PushDebugOverlayScope(utlstringtoken)\n Pushes an identifier used to group overlays. Overlays marked with this identifier can be deleted in a big batch.",
            "Text" : "void Text(Vector, int, string, float, int, int, int, int, float)\n Draws 2D text. Specify origin in world space."
        },
        "CDOTA_PlayerResource" : 
        {
            "GetDenies" : "int GetDenies(int)\n ",
            "GetNthCourierForTeam" : "handle GetNthCourierForTeam(int, int)\n ",
            "SetPlayerReservedState" : "void SetPlayerReservedState(int, bool)\n ",
            "GetTeam" : "int GetTeam(int)\n ",
            "GetCustomBuybackCost" : "int GetCustomBuybackCost(int)\n ",
            "ReplaceHeroWith" : "handle ReplaceHeroWith(int, string, int, int)\n (playerID, heroClassName, gold, XP) - replaces the player's hero with a new one of the specified class, gold and XP",
            "GetTowerDamageTaken" : "int GetTowerDamageTaken(int)\n ",
            "GetPlayerReservedState" : "bool GetPlayerReservedState(int)\n ",
            "GetEventRankGranted" : "int GetEventRankGranted(int)\n ",
            "IsDisableHelpSetForPlayerID" : "bool IsDisableHelpSetForPlayerID(int, int)\n ",
            "SetCustomBuybackCost" : "void SetCustomBuybackCost(int, int)\n Set the buyback cost for this player.",
            "GetMisses" : "int GetMisses(int)\n ",
            "GetClaimedDenies" : "int GetClaimedDenies(int)\n ",
            "IncrementTotalEarnedXP" : "void IncrementTotalEarnedXP(int, int)\n ",
            "IsBroadcaster" : "bool IsBroadcaster(int)\n ",
            "AddRunePickup" : "void AddRunePickup(int)\n ",
            "GetCreepDamageTaken" : "int GetCreepDamageTaken(int)\n ",
            "HasRepicked" : "bool HasRepicked(int)\n ",
            "GetUnitShareMaskForPlayer" : "int GetUnitShareMaskForPlayer(int, int)\n ",
            "GetCustomBuybackCooldown" : "float GetCustomBuybackCooldown(int)\n ",
            "GetRawPlayerDamage" : "int GetRawPlayerDamage(int)\n ",
            "IncrementStreak" : "void IncrementStreak(int)\n ",
            "GetTotalEarnedXP" : "int GetTotalEarnedXP(int)\n ",
            "HaveAllPlayersJoined" : "bool HaveAllPlayersJoined()\n ",
            "GetSelectedHeroName" : "string GetSelectedHeroName(int)\n ",
            "AddAegisPickup" : "void AddAegisPickup(int)\n ",
            "GetDamageDoneToHero" : "int GetDamageDoneToHero(int, int)\n ",
            "GetEventPremiumPointsGranted" : "int GetEventPremiumPointsGranted(int)\n ",
            "HasRandomed" : "bool HasRandomed(int)\n ",
            "GetTeamKills" : "int GetTeamKills(int)\n ",
            "IsValidTeamPlayerID" : "bool IsValidTeamPlayerID(int)\n ",
            "GetHealing" : "float GetHealing(int)\n ",
            "GetTotalGoldSpent" : "int GetTotalGoldSpent(int)\n ",
            "GetXPPerMin" : "float GetXPPerMin(int)\n ",
            "GetGoldPerMin" : "float GetGoldPerMin(int)\n ",
            "ClearLastHitStreak" : "void ClearLastHitStreak(int)\n ",
            "SetBuybackCooldownTime" : "void SetBuybackCooldownTime(int, float)\n ",
            "IncrementNearbyCreepDeaths" : "void IncrementNearbyCreepDeaths(int)\n ",
            "GetTotalEarnedGold" : "int GetTotalEarnedGold(int)\n ",
            "UpdateTeamSlot" : "void UpdateTeamSlot(int, int, bool)\n ",
            "SetCustomTeamAssignment" : "void SetCustomTeamAssignment(int, int)\n Set custom team assignment for this player.",
            "IsHeroSharedWithPlayerID" : "bool IsHeroSharedWithPlayerID(int, int)\n ",
            "GetSelectedHeroEntity" : "handle GetSelectedHeroEntity(int)\n ",
            "GetNearbyCreepDeaths" : "int GetNearbyCreepDeaths(int)\n ",
            "GetConnectionState" : "<unknown> GetConnectionState(int)\n ",
            "GetOriginalLobbyTeam" : "int GetOriginalLobbyTeam(int)\n The team this player was originally assigned in the lobby. DOTA_TEAM_NOTEAM if no lobby info.",
            "GetKillsDoneToHero" : "int GetKillsDoneToHero(int, int)\n ",
            "AddClaimedFarm" : "void AddClaimedFarm(int, float)\n ",
            "GetHeroDamageTaken" : "int GetHeroDamageTaken(int)\n ",
            "GetSelectedHeroID" : "int GetSelectedHeroID(int)\n ",
            "GetRunePickups" : "int GetRunePickups(int)\n ",
            "GetGoldBagsCollected" : "int GetGoldBagsCollected(int)\n ",
            "SetHasRepicked" : "void SetHasRepicked(int)\n ",
            "IncrementDenies" : "void IncrementDenies(int)\n ",
            "ClearKillsMatrix" : "void ClearKillsMatrix(int)\n ",
            "GetGoldSpentOnConsumables" : "int GetGoldSpentOnConsumables(int)\n ",
            "IsValidPlayerID" : "bool IsValidPlayerID(int)\n ",
            "GetNthPlayerIDOnTeam" : "int GetNthPlayerIDOnTeam(int, int)\n ",
            "IsValidTeamPlayer" : "bool IsValidTeamPlayer(int)\n ",
            "SetCustomBuybackCooldown" : "void SetCustomBuybackCooldown(int, float)\n Set the buyback cooldown for this player.",
            "GetAegisPickups" : "int GetAegisPickups(int)\n ",
            "SetHasRandomed" : "void SetHasRandomed(int)\n ",
            "SetCameraTarget" : "void SetCameraTarget(int, handle)\n (playerID, entity) - force the given player's camera to follow the given entity",
            "IncrementLastHitMultikill" : "void IncrementLastHitMultikill(int)\n ",
            "IsValidPlayer" : "bool IsValidPlayer(int)\n ",
            "ClearLastHitMultikill" : "void ClearLastHitMultikill(int)\n ",
            "ModifyGold" : "int ModifyGold(int, int, bool, int)\n ",
            "GetGoldSpentOnSupport" : "int GetGoldSpentOnSupport(int)\n ",
            "ClearStreak" : "void ClearStreak(int)\n ",
            "AreUnitsSharedWithPlayerID" : "bool AreUnitsSharedWithPlayerID(int, int)\n ",
            "GetSteamAccountID" : "unsigned GetSteamAccountID(int)\n ",
            "SetBuybackGoldLimitTime" : "void SetBuybackGoldLimitTime(int, float)\n ",
            "GetTimeOfLastConsumablePurchase" : "float GetTimeOfLastConsumablePurchase(int)\n ",
            "GetTimeOfLastItemPurchase" : "float GetTimeOfLastItemPurchase(int)\n ",
            "ClearRawPlayerDamageMatrix" : "void ClearRawPlayerDamageMatrix(int)\n ",
            "GetBroadcasterChannel" : "unsigned GetBroadcasterChannel(int)\n ",
            "IncrementClaimedMisses" : "void IncrementClaimedMisses(int)\n ",
            "AddGoldSpentOnSupport" : "void AddGoldSpentOnSupport(int, int)\n ",
            "GetRespawnSeconds" : "int GetRespawnSeconds(int)\n ",
            "IsHeroSelected" : "bool IsHeroSelected(string)\n ",
            "GetLevel" : "int GetLevel(int)\n ",
            "GetLastHitMultikill" : "int GetLastHitMultikill(int)\n ",
            "SpendGold" : "void SpendGold(int, int, int)\n ",
            "SetGold" : "void SetGold(int, int, bool)\n ",
            "GetUnreliableGold" : "int GetUnreliableGold(int)\n ",
            "GetAssists" : "int GetAssists(int)\n ",
            "GetGoldLostToDeath" : "int GetGoldLostToDeath(int)\n ",
            "GetDeaths" : "int GetDeaths(int)\n ",
            "WhoSelectedHero" : "int WhoSelectedHero(string)\n ",
            "GetGold" : "int GetGold(int)\n ",
            "IncrementKills" : "void IncrementKills(int, int)\n ",
            "GetReliableGold" : "int GetReliableGold(int)\n ",
            "IncrementAssists" : "void IncrementAssists(int)\n ",
            "GetClaimedFarm" : "float GetClaimedFarm(int)\n ",
            "GetNumItemsPurchased" : "int GetNumItemsPurchased(int)\n ",
            "GetKills" : "int GetKills(int)\n ",
            "HeroLevelUp" : "void HeroLevelUp(int)\n ",
            "ResetTotalEarnedGold" : "void ResetTotalEarnedGold(int)\n ",
            "GetPlayer" : "handle GetPlayer(int)\n ",
            "ResetBuybackCostTime" : "void ResetBuybackCostTime(int)\n ",
            "GetTowerKills" : "int GetTowerKills(int)\n ",
            "GetGoldSpentOnBuybacks" : "int GetGoldSpentOnBuybacks(int)\n ",
            "GetStuns" : "float GetStuns(int)\n ",
            "IncrementLastHits" : "void IncrementLastHits(int)\n ",
            "GetClaimedMisses" : "int GetClaimedMisses(int)\n ",
            "GetStreak" : "int GetStreak(int)\n ",
            "GetNumConsumablesPurchased" : "int GetNumConsumablesPurchased(int)\n ",
            "SetUnitShareMaskForPlayer" : "void SetUnitShareMaskForPlayer(int, int, int, bool)\n ",
            "GetLastHits" : "int GetLastHits(int)\n ",
            "IncrementLastHitStreak" : "void IncrementLastHitStreak(int)\n ",
            "GetRoshanKills" : "int GetRoshanKills(int)\n ",
            "IncrementGoldBagsCollected" : "void IncrementGoldBagsCollected(int)\n ",
            "IsNull" : "No description",
            "HasSelectedHero" : "bool HasSelectedHero(int)\n ",
            "IncrementClaimedDenies" : "void IncrementClaimedDenies(int)\n ",
            "IncrementMisses" : "void IncrementMisses(int)\n ",
            "IncrementDeaths" : "void IncrementDeaths(int)\n ",
            "GetBroadcasterChannelSlot" : "unsigned GetBroadcasterChannelSlot(int)\n ",
            "GetPlayerLoadedCompletely" : "bool GetPlayerLoadedCompletely(int)\n ",
            "IsFakeClient" : "bool IsFakeClient(int)\n ",
            "GetGoldSpentOnItems" : "int GetGoldSpentOnItems(int)\n ",
            "GetCustomTeamAssignment" : "int GetCustomTeamAssignment(int)\n Get the current custom team assignment for this player.",
            "GetNumCouriersForTeam" : "int GetNumCouriersForTeam(int)\n ",
            "SetLastBuybackTime" : "void SetLastBuybackTime(int, int)\n ",
            "GetPlayerName" : "string GetPlayerName(int)\n ",
            "GetEventPointsForPlayerID" : "int GetEventPointsForPlayerID(int)\n ",
            "GetLastHitStreak" : "int GetLastHitStreak(int)\n ",
            "GetTimeOfLastDeath" : "float GetTimeOfLastDeath(int)\n "
        },
        "CDotaQuest" : 
        {
            "RemoveSubquest" : "void RemoveSubquest(handle)\n Remove a subquest from this quest",
            "SetTextReplaceValue" : "void SetTextReplaceValue(int, int)\n Set a quest value",
            "SetTextReplaceString" : "void SetTextReplaceString(string)\n Set the text replace string for this quest",
            "AddSubquest" : "void AddSubquest(handle)\n Add a subquest to this quest",
            "IsNull" : "No description",
            "GetSubquest" : "handle GetSubquest(int)\n Finds a subquest from this quest by index",
            "GetSubquestByName" : "handle GetSubquestByName(string)\n Finds a subquest from this quest by name",
            "CompleteQuest" : "void CompleteQuest()\n Mark this quest complete"
        },
        "CBaseFlex" : 
        {
            "IsNull" : "No description",
            "GetCurrentScene" : "handle GetCurrentScene()\n Returns the instance of the oldest active scene entity (if any).",
            "GetSceneByIndex" : "handle GetSceneByIndex(int)\n Returns the instance of the scene entity at the specified index."
        },
        "CSceneEntity" : 
        {
            "IsPaused" : "bool IsPaused()\n If this scene is currently paused.",
            "IsPlayingBack" : "bool IsPlayingBack()\n If this scene is currently playing.",
            "RemoveBroadcastTeamTarget" : "void RemoveBroadcastTeamTarget(int)\n Removes a team (by index) from the broadcast list",
            "LoadSceneFromString" : "bool LoadSceneFromString(string, string)\n given a dummy scene name and a vcd string, load the scene",
            "FindNamedEntity" : "handle FindNamedEntity(string)\n given an entity reference, such as !target, get actual entity from scene object",
            "Start" : "void Start(handle)\n Start scene playback, takes activatorEntity as param",
            "FindCamera" : "handle FindCamera()\n Get the camera",
            "Cancel" : "void Cancel()\n Cancel scene playback",
            "AddBroadcastTeamTarget" : "void AddBroadcastTeamTarget(int)\n Adds a team (by index) to the broadcast list",
            "EstimateLength" : "float EstimateLength()\n Returns length of this scene in seconds.",
            "IsNull" : "No description"
        },
        "CScriptParticleManager" : 
        {
            "SetParticleAlwaysSimulate" : "void SetParticleAlwaysSimulate(int)\n ",
            "SetParticleControl" : "void SetParticleControl(int, int, Vector)\n Set the control point data for a control on a particle effect",
            "CreateParticleForPlayer" : "int CreateParticleForPlayer(string, int, handle, handle)\n Creates a new particle effect that only plays for the specified player",
            "GetParticleReplacement" : "string GetParticleReplacement(string, handle)\n ",
            "DestroyParticle" : "void DestroyParticle(int, bool)\n (int index, bool bDestroyImmediately) - Destroy a particle, if bDestroyImmediately destroy it without playing end caps.",
            "CreateParticle" : "int CreateParticle(string, int, handle)\n Creates a new particle effect",
            "ReleaseParticleIndex" : "void ReleaseParticleIndex(int)\n Frees the specified particle index",
            "IsNull" : "No description",
            "SetParticleControlEnt" : "void SetParticleControlEnt(int, int, handle, int, string, Vector, bool)\n "
        },
        "CDOTA_BaseNPC_Hero" : 
        {
            "GetPhysicalArmorValue" : "float GetPhysicalArmorValue()\n Hero armor is affected by attributes.",
            "GetDenies" : "int GetDenies()\n Value is stored in PlayerResource.",
            "GetIntellect" : "float GetIntellect()\n ",
            "ShouldDoFlyHeightVisual" : "bool ShouldDoFlyHeightVisual()\n ",
            "GetPlayerID" : "int GetPlayerID()\n Returns player ID of the player owning this hero",
            "GetLastHits" : "int GetLastHits()\n Value is stored in PlayerResource.",
            "GetBaseAgility" : "float GetBaseAgility()\n ",
            "IsReincarnating" : "bool IsReincarnating()\n ",
            "IsNull" : "No description",
            "IncrementLastHitMultikill" : "void IncrementLastHitMultikill()\n Value is stored in PlayerResource.",
            "RespawnHero" : "void RespawnHero(bool, bool, bool)\n Respawn this hero.",
            "GetBaseStrength" : "float GetBaseStrength()\n ",
            "GetDeathGoldCost" : "int GetDeathGoldCost()\n ",
            "GetManaRegen" : "float GetManaRegen()\n Hero mana regen is affected by attributes.",
            "ClearLastHitMultikill" : "void ClearLastHitMultikill()\n Value is stored in PlayerResource.",
            "ModifyGold" : "int ModifyGold(int, bool, int)\n Gives this hero some gold.  Args: int nGoldChange, bool bReliable, int reason",
            "GetPrimaryStatValue" : "float GetPrimaryStatValue()\n ",
            "ClearStreak" : "void ClearStreak()\n Value is stored in PlayerResource.",
            "GetAgility" : "float GetAgility()\n ",
            "SetBuybackGoldLimitTime" : "void SetBuybackGoldLimitTime(float)\n Set the amount of time gold gain is limited after buying back.",
            "CalculateStatBonus" : "void CalculateStatBonus()\n Recalculate all stats after the hero gains stats.",
            "GetBuybackCooldownTime" : "float GetBuybackCooldownTime()\n Return float value for the amount of time left on cooldown for this hero's buyback.",
            "GetGoldBounty" : "int GetGoldBounty()\n ",
            "GetHealthRegen" : "float GetHealthRegen()\n Hero health regen is affected by attributes.",
            "IncrementStreak" : "void IncrementStreak()\n Value is stored in PlayerResource.",
            "IsBuybackDisabledByReapersScythe" : "bool IsBuybackDisabledByReapersScythe()\n ",
            "GetBuybackCost" : "int GetBuybackCost()\n Return integer value for the gold cost of a buyback.",
            "CanEarnGold" : "bool CanEarnGold()\n Returns boolean value result of buyback gold limit time less than game time.",
            "GetStrength" : "float GetStrength()\n ",
            "GetAgilityGain" : "float GetAgilityGain()\n ",
            "GetNumAttackers" : "int GetNumAttackers()\n ",
            "GetCurrentXP" : "int GetCurrentXP()\n Returns the amount of XP ",
            "SetRespawnPosition" : "void SetRespawnPosition(Vector)\n ",
            "SetAbilityPoints" : "void SetAbilityPoints(int)\n Sets the current unspent ability points.",
            "SpendGold" : "void SpendGold(int, int)\n Args: int nGold, int nReason",
            "ModifyIntellect" : "void ModifyIntellect(float)\n Adds passed value to base attribute value, then calls CalculateStatBonus.",
            "UnitCanRespawn" : "bool UnitCanRespawn()\n ",
            "GetMultipleKillCount" : "int GetMultipleKillCount()\n ",
            "PerformTaunt" : "void PerformTaunt()\n ",
            "GetAttacker" : "int GetAttacker(int)\n ",
            "HasAnyAvailableInventorySpace" : "bool HasAnyAvailableInventorySpace()\n ",
            "SetGold" : "void SetGold(int, bool)\n Sets the gold amount for the player owning this hero",
            "HasRoomForItem" : "int HasRoomForItem(string, bool, bool)\n Args: const char* pItemName, bool bIncludeStashCombines, bool bAllowSelling",
            "KilledHero" : "void KilledHero(handle, handle)\n Args: Hero, Inflictor",
            "GetAbilityPoints" : "int GetAbilityPoints()\n Gets the current unspent ability points.",
            "SetTimeUntilRespawn" : "void SetTimeUntilRespawn(float)\n ",
            "GetAssists" : "int GetAssists()\n Value is stored in PlayerResource.",
            "GetTimeUntilRespawn" : "float GetTimeUntilRespawn()\n ",
            "ClearLastHitStreak" : "void ClearLastHitStreak()\n Value is stored in PlayerResource.",
            "GetStatsBasedManaRegen" : "float GetStatsBasedManaRegen()\n Returns only the regen based on Intelligence.",
            "UpgradeAbility" : "void UpgradeAbility(handle)\n This upgrades the passed ability if it exists and the hero has enough ability points.",
            "IncrementKills" : "void IncrementKills(int)\n Passed ID is for the victim, killer ID is ID of the current hero.  Value is stored in PlayerResource.",
            "GetPrimaryAttribute" : "int GetPrimaryAttribute()\n 0 = strength, 1 = agility, 2 = intelligence.",
            "IncrementAssists" : "void IncrementAssists()\n Value is stored in PlayerResource.",
            "HasFlyingVision" : "bool HasFlyingVision()\n ",
            "SetBuybackCooldownTime" : "void SetBuybackCooldownTime(float)\n Sets the buyback cooldown time.",
            "GetKills" : "int GetKills()\n Value is stored in PlayerResource.",
            "HeroLevelUp" : "void HeroLevelUp(bool)\n Levels up the hero, true or false to play effects.",
            "GetGold" : "int GetGold()\n Returns gold amount for the player owning this hero",
            "HasOwnerAbandoned" : "bool HasOwnerAbandoned()\n ",
            "WillReincarnate" : "bool WillReincarnate()\n ",
            "AddExperience" : "bool AddExperience(float, bool)\n Params: Float XP, Bool applyBotDifficultyScaling",
            "IncrementNearbyCreepDeaths" : "void IncrementNearbyCreepDeaths()\n Value is stored in PlayerResource.",
            "RecordLastHit" : "void RecordLastHit()\n ",
            "IncrementLastHits" : "void IncrementLastHits()\n Value is stored in PlayerResource.",
            "GetBaseDamageMin" : "int GetBaseDamageMin()\n Hero damage is also affected by attributes.",
            "GetBuybackGoldLimitTime" : "float GetBuybackGoldLimitTime()\n Returns the amount of time gold gain is limited after buying back.",
            "GetIncreasedAttackSpeed" : "float GetIncreasedAttackSpeed()\n Hero attack speed is also affected by agility.",
            "GetBaseDamageMax" : "int GetBaseDamageMax()\n Hero damage is also affected by attributes.",
            "SetBaseStrength" : "void SetBaseStrength(float)\n ",
            "GetStreak" : "int GetStreak()\n Value is stored in PlayerResource.",
            "GetMostRecentDamageTime" : "float GetMostRecentDamageTime()\n ",
            "SetBuyBackDisabledByReapersScythe" : "void SetBuyBackDisabledByReapersScythe(bool)\n ",
            "Buyback" : "void Buyback()\n Spend the gold and buyback with this hero.",
            "SetBaseIntellect" : "void SetBaseIntellect(float)\n ",
            "SetBaseAgility" : "void SetBaseAgility(float)\n ",
            "GetStrengthGain" : "float GetStrengthGain()\n ",
            "IncrementDeaths" : "void IncrementDeaths()\n Value is stored in PlayerResource.",
            "ModifyAgility" : "void ModifyAgility(float)\n Adds passed value to base attribute value, then calls CalculateStatBonus.",
            "ModifyStrength" : "void ModifyStrength(float)\n Adds passed value to base attribute value, then calls CalculateStatBonus.",
            "GetIntellectGain" : "float GetIntellectGain()\n ",
            "GetRespawnTime" : "float GetRespawnTime()\n ",
            "IncrementLastHitStreak" : "void IncrementLastHitStreak()\n Value is stored in PlayerResource.",
            "GetBaseIntellect" : "float GetBaseIntellect()\n ",
            "SetPlayerID" : "void SetPlayerID(int)\n ",
            "SetCustomDeathXP" : "void SetCustomDeathXP(int)\n Sets a custom experience value for this hero.  Note, GameRules boolean must be set for this to work!",
            "GetBonusDamageFromPrimaryStat" : "int GetBonusDamageFromPrimaryStat()\n ",
            "IncrementDenies" : "void IncrementDenies()\n Value is stored in PlayerResource.",
            "GetDeaths" : "int GetDeaths()\n Value is stored in PlayerResource."
        },
        "CDOTA_BaseNPC" : 
        {
            "ForceKill" : "void ForceKill(bool)\n Kill this unit immediately.",
            "CanEntityBeSeenByMyTeam" : "bool CanEntityBeSeenByMyTeam(handle)\n Check FoW to see if an entity is visible.",
            "GetAbilityCount" : "int GetAbilityCount()\n ",
            "IsIllusion" : "bool IsIllusion()\n ",
            "GetPlayerOwnerID" : "int GetPlayerOwnerID()\n Get the owner player ID for this unit.",
            "EjectItemFromStash" : "void EjectItemFromStash(handle)\n Drops the selected item out of this unit's stash.",
            "GetBaseDayTimeVisionRange" : "int GetBaseDayTimeVisionRange()\n Returns the vision range before modifiers.",
            "IsNull" : "No description",
            "IsMechanical" : "bool IsMechanical()\n Is the unit mechanical?",
            "IsRealHero" : "bool IsRealHero()\n Is this a real hero?",
            "SetDayTimeVisionRange" : "void SetDayTimeVisionRange(int)\n Set the base vision range.",
            "GetModelRadius" : "float GetModelRadius()\n ",
            "GetAverageTrueAttackDamage" : "int GetAverageTrueAttackDamage()\n Returns the average value of the minimum and maximum damage values.",
            "RemoveModifierByName" : "void RemoveModifierByName(string)\n Removes a modifier.",
            "DropItemAtPositionImmediate" : "void DropItemAtPositionImmediate(handle, Vector)\n Immediately drop a carried item at a given position.",
            "DestroyAllSpeechBubbles" : "void DestroyAllSpeechBubbles()\n ",
            "GetPaddedCollisionRadius" : "float GetPaddedCollisionRadius()\n Get the collision hull radius (including padding) of this NPC.",
            "GetAttackSpeed" : "float GetAttackSpeed()\n ",
            "IsOwnedByAnyPlayer" : "bool IsOwnedByAnyPlayer()\n Is this unit owned by any non-bot player?",
            "MoveToTargetToAttack" : "void MoveToTargetToAttack(handle)\n Move to a target to attack.",
            "IsDeniable" : "bool IsDeniable()\n ",
            "SetHullRadius" : "void SetHullRadius(float)\n Set the collision hull radius of this NPC.",
            "GetAttackRange" : "float GetAttackRange()\n Gets this unit's attack range after all modifiers.",
            "SetMana" : "void SetMana(float)\n Set the mana on this unit.",
            "GetInitialGoalEntity" : "handle GetInitialGoalEntity()\n Returns the initial waypoint goal for this NPC.",
            "GetCursorTargetingNothing" : "bool GetCursorTargetingNothing()\n ",
            "IsCommandRestricted" : "bool IsCommandRestricted()\n ",
            "GetRangeToUnit" : "float GetRangeToUnit(handle)\n ",
            "SetCustomHealthLabel" : "void SetCustomHealthLabel(string pLabel, int r, int g, int b)\n ",
            "CastAbilityImmediately" : "void CastAbilityImmediately(handle, int)\n Cast an ability immediately.",
            "SetCursorCastTarget" : "void SetCursorCastTarget(handle)\n ",
            "SetNightTimeVisionRange" : "void SetNightTimeVisionRange(int)\n Returns the vision range after modifiers.",
            "TimeUntilNextAttack" : "float TimeUntilNextAttack()\n ",
            "GetCollisionPadding" : "float GetCollisionPadding()\n Returns the size of the collision padding around the hull.",
            "AddNoDraw" : "void AddNoDraw()\n Adds the no draw flag.",
            "IsAncient" : "bool IsAncient()\n Is this creature an Ancient?",
            "SetStolenScepter" : "void SetStolenScepter(bool)\n ",
            "TriggerModifierDodge" : "bool TriggerModifierDodge()\n ",
            "GetAttackDamage" : "int GetAttackDamage()\n Returns a random integer between the minimum and maximum base damage of the unit.",
            "GetLastAttackTime" : "float GetLastAttackTime()\n ",
            "Stop" : "void Stop()\n Stop the current order.",
            "GetAbilityByIndex" : "handle GetAbilityByIndex(int)\n Retrieve an ability by index from the unit.",
            "SetModifierStackCount" : "void SetModifierStackCount(string, handle, int)\n Sets the stack count of a given modifier.",
            "SetInitialGoalEntity" : "void SetInitialGoalEntity(handle)\n Sets the initial waypoint goal for this NPC.",
            "IsCreature" : "bool IsCreature()\n Is this a Creature type NPC?",
            "GetCreationTime" : "float GetCreationTime()\n ",
            "SetOriginalModel" : "void SetOriginalModel(string)\n Sets the original model of this entity, which it will tend to fall back to anytime its state changes.",
            "IsOutOfGame" : "bool IsOutOfGame()\n ",
            "AngerNearbyUnits" : "void AngerNearbyUnits()\n ",
            "RespawnUnit" : "void RespawnUnit()\n Respawns the target unit if it can be respawned.",
            "RemoveItem" : "void RemoveItem(handle)\n Removes the passed item from this unit's inventory.",
            "GetNightTimeVisionRange" : "int GetNightTimeVisionRange()\n Returns the vision range after modifiers.",
            "UnitCanRespawn" : "bool UnitCanRespawn()\n ",
            "InterruptChannel" : "void InterruptChannel()\n ",
            "AddSpeechBubble" : "void AddSpeechBubble(int, string, float, unsigned, unsigned)\n Add a speech bubble(1-4 live at a time) to this NPC.",
            "NotOnMinimapForEnemies" : "bool NotOnMinimapForEnemies()\n ",
            "GetHealthPercent" : "int GetHealthPercent()\n Get the current health percent of the unit.",
            "IsPhantomBlocker" : "bool IsPhantomBlocker()\n ",
            "MakePhantomBlocker" : "void MakePhantomBlocker()\n ",
            "BoundingRadius2D" : "float BoundingRadius2D()\n ",
            "HasAbility" : "bool HasAbility(string)\n See whether this unit has an ability by name.",
            "MakeVisibleDueToAttack" : "void MakeVisibleDueToAttack(int)\n ",
            "IsInvulnerable" : "bool IsInvulnerable()\n ",
            "GetAttackRangeBuffer" : "float GetAttackRangeBuffer()\n Gets the attack range buffer.",
            "SetBaseDamageMin" : "void SetBaseDamageMin(int)\n Sets the minimum base damage.",
            "IsFrozen" : "bool IsFrozen()\n ",
            "GetBaseNightTimeVisionRange" : "int GetBaseNightTimeVisionRange()\n Returns the vision range after modifiers.",
            "DropItemAtPosition" : "void DropItemAtPosition(Vector, handle)\n Drop an item at a given point.",
            "MakeVisibleToTeam" : "void MakeVisibleToTeam(int, float)\n ",
            "GetOpposingTeamNumber" : "int GetOpposingTeamNumber()\n ",
            "GetModifierCount" : "int GetModifierCount()\n How many modifiers does this unit have?",
            "SetCursorPosition" : "void SetCursorPosition(Vector)\n ",
            "GetHullRadius" : "float GetHullRadius()\n Get the collision hull radius of this NPC.",
            "SetForceAttackTarget" : "void SetForceAttackTarget(handle)\n ",
            "GetModifierStackCount" : "int GetModifierStackCount(string, handle)\n Gets the stack count of a given modifier.",
            "HasModifier" : "bool HasModifier(string)\n Sees if this unit has a given modifier.",
            "ShouldIdleAcquire" : "bool ShouldIdleAcquire()\n ",
            "GetModifierNameByIndex" : "string GetModifierNameByIndex(int)\n Get a modifier name by index.",
            "SetControllableByPlayer" : "void SetControllableByPlayer(int, bool)\n Set this unit controllable by the player with the passed ID.",
            "RemoveNoDraw" : "void RemoveNoDraw()\n Remove the no draw flag.",
            "ReduceMana" : "void ReduceMana(float)\n Remove mana from this unit, this can be used for involuntary mana loss, not for mana that is spent.",
            "SetBaseManaRegen" : "void SetBaseManaRegen(float)\n ",
            "SetIdleAcquire" : "void SetIdleAcquire(bool)\n ",
            "GetCursorPosition" : "Vector GetCursorPosition()\n ",
            "GetBaseAttackTime" : "float GetBaseAttackTime()\n ",
            "GetDayTimeVisionRange" : "int GetDayTimeVisionRange()\n Returns the vision range after modifiers.",
            "MoveToNPC" : "void MoveToNPC(handle)\n Move to follow a unit.",
            "IsUnableToMiss" : "bool IsUnableToMiss()\n ",
            "RemoveModifierByNameAndCaster" : "void RemoveModifierByNameAndCaster(string, handle)\n Removes a modifier that was cast by the given caster.",
            "IsPositionInRange" : "bool IsPositionInRange(Vector, float)\n ",
            "HasAttackCapability" : "bool HasAttackCapability()\n ",
            "GetAttacksPerSecond" : "float GetAttacksPerSecond()\n ",
            "GetBaseDamageMin" : "int GetBaseDamageMin()\n Get the minimum attack damage of this unit.",
            "InterruptMotionControllers" : "void InterruptMotionControllers(bool)\n ",
            "Interrupt" : "void Interrupt()\n ",
            "IsOpposingTeam" : "bool IsOpposingTeam(int)\n ",
            "GetForceAttackTarget" : "handle GetForceAttackTarget()\n ",
            "PerformAttack" : "void PerformAttack(handle, bool, bool, bool, bool)\n Performs an attack on a target.",
            "GetDeathXP" : "int GetDeathXP()\n Get the XP bounty on this unit.",
            "SetAdditionalBattleMusicWeight" : "void SetAdditionalBattleMusicWeight(float)\n Combat involving this creature will have this weight added to the music calcuations.",
            "GetAdditionalBattleMusicWeight" : "float GetAdditionalBattleMusicWeight()\n Combat involving this creature will have this weight added to the music calcuations.",
            "ModifyHealth" : "void ModifyHealth(int, handle, bool, int)\n Sets the health to a specific value, with optional flags or inflictors.",
            "IsMagicImmune" : "bool IsMagicImmune()\n ",
            "AlertNearbyUnits" : "void AlertNearbyUnits(handle, handle)\n ",
            "GetHealthRegen" : "float GetHealthRegen()\n ",
            "SetAttacking" : "void SetAttacking(handle)\n ",
            "SetBaseMagicalResistanceValue" : "void SetBaseMagicalResistanceValue(float)\n Sets base magical armor value.",
            "AddAbility" : "void AddAbility(string)\n Add an ability to this unit by name.",
            "HasItemInInventory" : "bool HasItemInInventory(string)\n See whether this unit has an item by name.",
            "IsMuted" : "bool IsMuted()\n ",
            "SetDeathXP" : "void SetDeathXP(int)\n Set the XP bounty on this unit.",
            "GetBaseHealthRegen" : "float GetBaseHealthRegen()\n ",
            "IsAttackingEntity" : "bool IsAttackingEntity(handle)\n ",
            "GetPhysicalArmorValue" : "float GetPhysicalArmorValue()\n Returns current physical armor value.",
            "GetAttackAnimationPoint" : "float GetAttackAnimationPoint()\n ",
            "IsHardDisarmed" : "bool IsHardDisarmed()\n ",
            "GetMoveSpeedModifier" : "float GetMoveSpeedModifier(float)\n ",
            "GetMana" : "float GetMana()\n Get the mana on this unit.",
            "AddNewModifier" : "void AddNewModifier(handle, handle, string, handle)\n Add a modifier to this unit.",
            "SwapAbilities" : "void SwapAbilities(string, string, bool, bool)\n Swaps the slots of the two passed abilities and sets them enabled/disabled.",
            "AttackNoEarlierThan" : "void AttackNoEarlierThan(float)\n ",
            "IsPhased" : "bool IsPhased()\n ",
            "AttackReady" : "bool AttackReady()\n ",
            "SpendMana" : "void SpendMana(float, handle)\n Spend mana from this unit, this can be used for spending mana from abilities or item usage.",
            "GetUnitLabel" : "string GetUnitLabel()\n ",
            "GetUnitName" : "string GetUnitName()\n Get the name of this unit.",
            "SetUnitName" : "void SetUnitName(string)\n ",
            "SetRangedProjectileName" : "void SetRangedProjectileName(string)\n ",
            "GetProjectileSpeed" : "int GetProjectileSpeed()\n ",
            "IsRangedAttacker" : "bool IsRangedAttacker()\n Is this unit a ranged attacker?",
            "SellItem" : "void SellItem(handle)\n Sells the passed item in this unit's inventory.",
            "IsSoftDisarmed" : "bool IsSoftDisarmed()\n ",
            "GetMainControllingPlayer" : "int GetMainControllingPlayer()\n Returns the player ID of the controlling player.",
            "SetMinimumGoldBounty" : "void SetMinimumGoldBounty(int)\n Set the minimum gold bounty for this unit.",
            "HasFlyingVision" : "bool HasFlyingVision()\n ",
            "HasAnyActiveAbilities" : "bool HasAnyActiveAbilities()\n ",
            "HasMovementCapability" : "bool HasMovementCapability()\n ",
            "IsIdle" : "bool IsIdle()\n Is this creature currently idle?",
            "SetAttackCapability" : "void SetAttackCapability(int)\n ",
            "SetBaseHealthRegen" : "void SetBaseHealthRegen(float)\n ",
            "SetBaseMoveSpeed" : "void SetBaseMoveSpeed(int)\n ",
            "SetMaximumGoldBounty" : "void SetMaximumGoldBounty(int)\n Set the maximum gold bounty for this unit.",
            "FindAbilityByName" : "handle FindAbilityByName(string)\n Retrieve an ability by name from the unit.",
            "GetItemInSlot" : "handle GetItemInSlot(int)\n Returns nth item in inventory slot (index is zero based).",
            "IsBlind" : "bool IsBlind()\n ",
            "PickupDroppedItem" : "void PickupDroppedItem(handle)\n Pick up a dropped item.",
            "SetMustReachEachGoalEntity" : "void SetMustReachEachGoalEntity(bool)\n Set whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path.",
            "HasGroundMovementCapability" : "bool HasGroundMovementCapability()\n ",
            "GiveMana" : "void GiveMana(float)\n Give mana to this unit, this can be used for mana gained by abilities or item usage.",
            "SetMoveCapability" : "void SetMoveCapability(int)\n ",
            "GetMustReachEachGoalEntity" : "bool GetMustReachEachGoalEntity()\n Set whether this NPC is required to reach each goal entity, rather than being allowed to unkink their path.",
            "GetAttackCapability" : "int GetAttackCapability()\n ",
            "PickupRune" : "void PickupRune(handle)\n Pick up a rune.",
            "GetMaximumGoldBounty" : "int GetMaximumGoldBounty()\n Get the maximum gold bounty for this unit.",
            "IsStunned" : "bool IsStunned()\n ",
            "HasInventory" : "bool HasInventory()\n Does this unit have an inventory.",
            "MoveToNPCToGiveItem" : "void MoveToNPCToGiveItem(handle, handle)\n Give an item to another unit.",
            "HasScepter" : "bool HasScepter()\n ",
            "IsMovementImpaired" : "bool IsMovementImpaired()\n ",
            "NoTeamMoveTo" : "bool NoTeamMoveTo()\n ",
            "GetCursorCastTarget" : "handle GetCursorCastTarget()\n ",
            "IsInvisible" : "bool IsInvisible()\n ",
            "HasFlyMovementCapability" : "bool HasFlyMovementCapability()\n ",
            "PassivesDisabled" : "bool PassivesDisabled()\n ",
            "GetGoldBounty" : "int GetGoldBounty()\n Get the gold bounty on this unit.",
            "IsDominated" : "bool IsDominated()\n ",
            "AddItem" : "void AddItem(handle)\n Add an item to this unit's inventory.",
            "GetCurrentVisionRange" : "int GetCurrentVisionRange()\n Gets the current vision range.",
            "SetBaseAttackTime" : "void SetBaseAttackTime(float)\n ",
            "NoHealthBar" : "bool NoHealthBar()\n ",
            "IsNightmared" : "bool IsNightmared()\n ",
            "NotOnMinimap" : "bool NotOnMinimap()\n ",
            "IsSpeciallyDeniable" : "bool IsSpeciallyDeniable()\n ",
            "GetAttackTarget" : "handle GetAttackTarget()\n ",
            "GetHasteFactor" : "float GetHasteFactor()\n ",
            "RemoveAbility" : "void RemoveAbility(string)\n Remove an ability from this unit by name.",
            "IsBlockDisabled" : "bool IsBlockDisabled()\n ",
            "GetCastPoint" : "float GetCastPoint(bool)\n ",
            "Hold" : "void Hold()\n Hold position.",
            "GetLevel" : "int GetLevel()\n Returns the level of this unit.",
            "SetCursorTargetingNothing" : "void SetCursorTargetingNothing(bool)\n ",
            "IsHero" : "bool IsHero()\n Is this a hero or hero illusion?",
            "IsLowAttackPriority" : "bool IsLowAttackPriority()\n ",
            "SetBaseDamageMax" : "void SetBaseDamageMax(int)\n Sets the maximum base damage.",
            "NoUnitCollision" : "bool NoUnitCollision()\n ",
            "IsHexed" : "bool IsHexed()\n ",
            "IsAttacking" : "bool IsAttacking()\n ",
            "MoveToPosition" : "void MoveToPosition(Vector)\n Issue a Move-To command.",
            "ProvidesVision" : "bool ProvidesVision()\n ",
            "MoveToPositionAggressive" : "void MoveToPositionAggressive(Vector)\n Issue an Attack-Move-To command.",
            "IsAttackImmune" : "bool IsAttackImmune()\n ",
            "MakeIllusion" : "void MakeIllusion()\n ",
            "IsRooted" : "bool IsRooted()\n ",
            "IsDisarmed" : "bool IsDisarmed()\n ",
            "SetHasInventory" : "void SetHasInventory(bool)\n Set if this unit has an inventory.",
            "GetIdealSpeed" : "float GetIdealSpeed()\n Returns speed after all modifiers.",
            "CastAbilityNoTarget" : "void CastAbilityNoTarget(handle, int)\n Cast an ability with no target.",
            "Kill" : "void Kill(handle, handle)\n Kills this NPC, with the params Ability and Attacker.",
            "TriggerSpellAbsorb" : "bool TriggerSpellAbsorb(handle)\n ",
            "Heal" : "void Heal(float, handle)\n Heal this unit.",
            "GetSecondsPerAttack" : "float GetSecondsPerAttack()\n ",
            "GetManaRegen" : "float GetManaRegen()\n ",
            "IsEvadeDisabled" : "bool IsEvadeDisabled()\n ",
            "GetNeverMoveToClearSpace" : "bool GetNeverMoveToClearSpace()\n If set to true, we will never attempt to move this unit to clear space, even when it unphases.",
            "GetStatsBasedManaRegen" : "float GetStatsBasedManaRegen()\n Returns mana regen rate per intelligence.",
            "IsUnselectable" : "bool IsUnselectable()\n ",
            "GetMagicalArmorValue" : "float GetMagicalArmorValue()\n Returns current magical armor value.",
            "GetHealthDeficit" : "int GetHealthDeficit()\n Returns integer amount of health missing from max.",
            "GetIncreasedAttackSpeed" : "float GetIncreasedAttackSpeed()\n ",
            "GetBaseDamageMax" : "int GetBaseDamageMax()\n Get the maximum attack damage of this unit.",
            "GetPlayerOwner" : "handle GetPlayerOwner()\n Returns the player that owns this unit.",
            "GetLastIdleChangeTime" : "float GetLastIdleChangeTime()\n Get the last game time that this unit switched to/from idle state.",
            "IsNeutralUnitType" : "bool IsNeutralUnitType()\n Is this a neutral?",
            "GetMaxMana" : "float GetMaxMana()\n Get the maximum mana of this unit.",
            "GetBaseMagicalResistanceValue" : "float GetBaseMagicalResistanceValue()\n Returns base magical armor value.",
            "IsAlive" : "bool IsAlive()\n Is this unit alive?",
            "GetBaseMoveSpeed" : "float GetBaseMoveSpeed()\n ",
            "NoTeamSelect" : "bool NoTeamSelect()\n ",
            "GetManaPercent" : "int GetManaPercent()\n Get the percent of mana remaining.",
            "CastAbilityOnPosition" : "void CastAbilityOnPosition(Vector, handle, int)\n Cast an ability on a position.",
            "GetMinimumGoldBounty" : "int GetMinimumGoldBounty()\n Get the minimum gold bounty for this unit.",
            "GetTotalPurchasedUpgradeGoldCost" : "int GetTotalPurchasedUpgradeGoldCost()\n Get how much gold has been spent on ability upgrades.",
            "IsTower" : "bool IsTower()\n Is this a tower?",
            "SetNeverMoveToClearSpace" : "void SetNeverMoveToClearSpace(bool)\n If set to true, we will never attempt to move this unit to clear space, even when it unphases.",
            "IsSilenced" : "bool IsSilenced()\n ",
            "GetBaseMaxHealth" : "float GetBaseMaxHealth()\n Gets the base max health value.",
            "SetPhysicalArmorBaseValue" : "void SetPhysicalArmorBaseValue(float)\n Sets base physical armor value.",
            "GetAcquisitionRange" : "float GetAcquisitionRange()\n Gets the range at which this unit will auto-acquire.",
            "IsSummoned" : "bool IsSummoned()\n Is this unit summoned?",
            "SetBaseMaxHealth" : "void SetBaseMaxHealth(float)\n Set a new base max health value.",
            "DisassembleItem" : "void DisassembleItem(handle)\n Disassemble the passed item in this unit's inventory.",
            "GetPercentageBasedManaRegen" : "float GetPercentageBasedManaRegen()\n This Mana regen is derived from % bonuses (from items like Void Stone).",
            "GetConstantBasedManaRegen" : "float GetConstantBasedManaRegen()\n This Mana regen is derived from constant bonuses like Basilius.",
            "CastAbilityToggle" : "void CastAbilityToggle(handle, int)\n Toggle an ability.",
            "IsPhantom" : "bool IsPhantom()\n Is this a phantom unit?",
            "GetPhysicalArmorBaseValue" : "float GetPhysicalArmorBaseValue()\n Returns base physical armor value.",
            "GetCurrentActiveAbility" : "handle GetCurrentActiveAbility()\n Get the ability this unit is currently casting.",
            "IsControllableByAnyPlayer" : "bool IsControllableByAnyPlayer()\n Is this unit controlled by any non-bot player?",
            "CastAbilityOnTarget" : "void CastAbilityOnTarget(handle, handle, int)\n Cast an ability on a target entity.",
            "SetAcquisitionRange" : "void SetAcquisitionRange(int)\n "
        },
        "CDOTA_BaseNPC_Building" : 
        {
            "IsNull" : "No description",
            "SetInvulnCount" : "void SetInvulnCount(int)\n Set the invulnerability counter of this building.",
            "GetInvulnCount" : "int GetInvulnCount()\n Get the invulnerability count for a building."
        },
        "CEntities" : 
        {
            "First" : "handle First()\n Begin an iteration over the list of entities",
            "FindAllByModel" : "table FindAllByModel(string)\n Find entities by model name.",
            "FindByName" : "handle FindByName(handle, string)\n Find entities by name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
            "FindInSphere" : "handle FindInSphere(handle, Vector, float)\n Find entities within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
            "FindAllByTarget" : "table FindAllByTarget(string)\n Find entities by targetname.",
            "FindByClassnameNearest" : "handle FindByClassnameNearest(string, Vector, float)\n Find entities by class name nearest to a point.",
            "FindByClassname" : "handle FindByClassname(handle, string)\n Find entities by class name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
            "FindAllByName" : "table FindAllByName(string)\n Find all entities by name. Returns an array containing all the found entities in it.",
            "FindAllByClassnameWithin" : "table FindAllByClassnameWithin(string, Vector, float)\n Find entities by class name within a radius.",
            "FindByModel" : "handle FindByModel(handle, string)\n Find entities by model name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
            "FindAllByNameWithin" : "table FindAllByNameWithin(string, Vector, float)\n Find entities by name within a radius.",
            "FindByClassnameWithin" : "handle FindByClassnameWithin(handle, string, Vector, float)\n Find entities by class name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
            "FindByNameWithin" : "handle FindByNameWithin(handle, string, Vector, float)\n Find entities by name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
            "FindByNameNearest" : "handle FindByNameNearest(string, Vector, float)\n Find entities by name nearest to a point.",
            "FindAllByClassname" : "table FindAllByClassname(string)\n Finds all entities by class name. Returns an array containing all the found entities.",
            "FindByTarget" : "handle FindByTarget(handle, string)\n Find entities by targetname. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
            "IsNull" : "No description",
            "FindAllInSphere" : "table FindAllInSphere(Vector, float)\n Find entities within a radius.",
            "Next" : "handle Next(handle)\n Continue an iteration over the list of entities, providing reference to a previously found entity",
            "CreateByClassname" : "handle CreateByClassname(string)\n Creates an entity by classname",
            "FindByModelWithin" : "handle FindByModelWithin(handle, string, Vector, float)\n Find entities by model name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
        },
        "CDOTA_Ability_Nian_Dive" : 
        {
            "IsNull" : "No description",
            "SetPlaybackRate" : "void SetPlaybackRate(float)\n Override playbackrate"
        },
        "GridNav" : 
        {
            "GridPosToWorldCenterX" : "float GridPosToWorldCenterX(int)\n Get the X position of the center of a given X index",
            "WorldToGridPosY" : "int WorldToGridPosY(float)\n Get the Y index of a given world Y position",
            "IsBlocked" : "bool IsBlocked(Vector)\n Checks whether the given position is blocked",
            "IsNearbyTree" : "bool IsNearbyTree(Vector, float, bool)\n (position, radius, checkFullTreeRadius?) Checks whether there are any trees overlapping the given point",
            "IsTraversable" : "bool IsTraversable(Vector)\n Checks whether the given position is traversable",
            "WorldToGridPosX" : "int WorldToGridPosX(float)\n Get the X index of a given world X position",
            "IsNull" : "No description",
            "GridPosToWorldCenterY" : "float GridPosToWorldCenterY(int)\n Get the Y position of the center of a given Y index",
            "RegrowAllTrees" : "void RegrowAllTrees()\n Causes all trees in the map to regrow"
        },
        "CDotaSubquestBase" : 
        {
            "SetTextReplaceString" : "void SetTextReplaceString(string)\n Set the text replace string for this subquest",
            "IsNull" : "No description",
            "CompleteSubquest" : "void CompleteSubquest()\n Mark this subquest complete",
            "SetTextReplaceValue" : "void SetTextReplaceValue(int, int)\n Set a subquest value"
        },
        "CBaseEntity" : 
        {
            "GetTeamNumber" : "int GetTeamNumber()\n Get the team number of this entity.",
            "GetChildren" : "handle GetChildren()\n Get the entities parented to this entity.",
            "SetAngularVelocity" : "void SetAngularVelocity(float, float, float)\n Set the local angular velocity - takes float pitch,yaw,roll velocities",
            "IsNull" : "No description",
            "SetOwner" : "void SetOwner(handle)\n Sets this entity's owner",
            "FirstMoveChild" : "handle FirstMoveChild()\n ",
            "GetAngularVelocity" : "Vector GetAngularVelocity()\n Get the local angular velocity - returns a vector of pitch,yaw,roll",
            "SetContextThink" : "void SetContextThink(string, handle, float)\n Set a think function on this entity.",
            "GetForwardVector" : "Vector GetForwardVector()\n Get the forward vector of the entity.",
            "GetBoundingMaxs" : "Vector GetBoundingMaxs()\n Get a vector containing max bounds, centered on object.",
            "GetCenter" : "Vector GetCenter()\n Get vector to center of object - absolute coords",
            "GetOwner" : "handle GetOwner()\n Gets this entity's owner",
            "GetContext" : "table GetContext(string)\n GetContext( name ): looks up a context and returns it if available. May return string, float, or null (if the context isn't found).",
            "OverrideFriction" : "void OverrideFriction(float, float)\n Takes duration, value for a temporary override.",
            "GetRootMoveParent" : "handle GetRootMoveParent()\n If in hierarchy, walks up the hierarchy to find the root parent.",
            "SetModel" : "void SetModel(string)\n ",
            "GetUpVector" : "Vector GetUpVector()\n Get the up vector of the entity.",
            "GetVelocity" : "Vector GetVelocity()\n ",
            "SetRenderColor" : "void SetRenderColor(int, int, int)\n SetRenderColor( r, g, b ): Sets the render color of the entity.",
            "GetLocalAngularVelocity" : "QAngle GetLocalAngularVelocity()\n Maybe local angvel",
            "GetOwnerEntity" : "handle GetOwnerEntity()\n Get the owner entity, if there is one",
            "GetBaseVelocity" : "Vector GetBaseVelocity()\n Get Base? velocity.",
            "GatherCriteria" : "void GatherCriteria(handle)\n Returns a table containing the criteria that would be used for response queries on this entity. This is the same as the table that is passed to response rule script function callbacks.",
            "Trigger" : "void Trigger()\n Fires off this entity's OnTrigger responses.",
            "EyePosition" : "Vector EyePosition()\n Get vector to eye position - absolute coords.",
            "SetHealth" : "void SetHealth(int)\n Set the health of this entity.",
            "SetAngles" : "void SetAngles(float, float, float)\n Set entity pitch, yaw, roll.",
            "SetContextNum" : "void SetContextNum(string, float, float)\n SetContextNum( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a number (int or float). Will last for duration (set 0 to mean 'forever').",
            "GetAbsOrigin" : "Vector GetAbsOrigin()\n ",
            "NextMovePeer" : "handle NextMovePeer()\n ",
            "ApplyLocalAngularVelocityImpulse" : "void ApplyLocalAngularVelocityImpulse(Vector)\n Apply an Ang Velocity Impulse",
            "GetMaxHealth" : "int GetMaxHealth()\n Get the maximum health of this entity.",
            "PrecacheScriptSound" : "void PrecacheScriptSound(string)\n Precache a sound for later playing.",
            "GetHealth" : "int GetHealth()\n Get the health of this entity.",
            "EyeAngles" : "QAngle EyeAngles()\n Get the qangles that this entity is looking at.",
            "GetModelName" : "string GetModelName()\n Returns the name of the model.",
            "SetContext" : "void SetContext(string, string, float)\n SetContext( name , value, duration ): store any key/value pair in this entity's dialog contexts. Value must be a string. Will last for duration (set 0 to mean 'forever').",
            "EmitSoundParams" : "void EmitSoundParams(string, int, float, float)\n Plays/modifies a sound from this entity. changes sound if nPitch and/or flVol or flSoundTime is > 0.",
            "GetAnglesAsVector" : "Vector GetAnglesAsVector()\n Get entity pitch, yaw, roll as a vector.",
            "SetThink" : "No description",
            "GetMoveParent" : "handle GetMoveParent()\n If in hierarchy, retrieves the entity's parent.",
            "GetAngles" : "QAngle GetAngles()\n ",
            "SetTeam" : "void SetTeam(int)\n ",
            "IsAlive" : "bool IsAlive()\n Is this entity alive?",
            "SetParent" : "void SetParent(handle, string)\n Set the parent for this entity.",
            "GetOrigin" : "Vector GetOrigin()\n ",
            "EmitSound" : "void EmitSound(string)\n Plays a sound from this entity.",
            "IsInstance" : "No description",
            "GetBoundingMins" : "Vector GetBoundingMins()\n Get a vector containing min bounds, centered on object.",
            "SetForwardVector" : "void SetForwardVector(Vector)\n Set the orientation of the entity to have this forward vector.",
            "ApplyAbsVelocityImpulse" : "void ApplyAbsVelocityImpulse(Vector)\n Apply a Velocity Impulse",
            "StopThink" : "No description",
            "SetSize" : "void SetSize(Vector, Vector)\n ",
            "SetFriction" : "void SetFriction(float)\n Set PLAYER friction, ignored for objects.",
            "SetGravity" : "void SetGravity(float)\n Set PLAYER gravity, ignored for objects.",
            "SetOrigin" : "void SetOrigin(Vector)\n ",
            "IsPlayer" : "bool IsPlayer()\n Is this entity a player?",
            "SetMaxHealth" : "void SetMaxHealth(int)\n Set the maximum health of this entity.",
            "StopSound" : "void StopSound(string)\n Stops a named sound playing from this entity.",
            "GetTeam" : "int GetTeam()\n Get the team number of this entity.",
            "SetAbsOrigin" : "void SetAbsOrigin(Vector)\n ",
            "SetVelocity" : "void SetVelocity(Vector)\n ",
            "GetSoundDuration" : "float GetSoundDuration(string, string)\n Returns float duration of the sound. Takes soundname and optional actormodelname.",
            "GetRightVector" : "Vector GetRightVector()\n Get the right vector of the entity.",
            "GetLocalVelocity" : "Vector GetLocalVelocity()\n Get Entity relative velocity.",
            "GetBounds" : "table GetBounds()\n Get a table containing the 'Mins' & 'Maxs' vector bounds, centered on object.",
            "Kill" : "void Kill()\n "
        },
        "CEntityScriptFramework" : 
        {
            "IsNull" : "No description"
        }
    },
    "ScriptAssert" : "No description",
    "ConnectOutputs" : "No description",
    "Dynamic_Wrap" : "No description",
    "__RegisterGameEventListeners" : "No description",
    "NativeFunctions" : 
    {
    },
    "__ReplaceClosures" : "No description",
    "EntFireByHandle" : "No description",
    "EntFire" : "No description",
    "UniqueString" : "No description",
    "vlua" : 
    {
        "find" : "No description",
        "rawdelete" : "No description",
        "delete" : "No description",
        "resize" : "No description",
        "extend" : "No description",
        "split" : "No description",
        "contains" : "No description",
        "clone" : "No description",
        "tableadd" : "No description",
        "reduce" : "No description",
        "rawin" : "No description",
        "reverse" : "No description",
        "select" : "No description",
        "compare" : "No description",
        "slice" : "No description",
        "clear" : "No description",
        "map" : "No description"
    },
    "isclass" : "No description",
    "getbase" : "No description",
    "getclass" : "No description",
    "IsDedicatedServer" : "bool IsDedicatedServer()\n Returns true if this server is a dedicated server.",
    "class" : "No description",
    "ScriptDebugHook" : "No description",
    "ScriptDebugRemoveWatch" : "No description",
    "GetPhysVelocity" : "Vector GetPhysVelocity(handle)\n Get Velocity for VPHYS or normal object",
    "UnloadSpawnGroupByHandle" : "void UnloadSpawnGroupByHandle(int)\n Unload a spawn group by handle",
    "SetOpvarFloatAll" : "void SetOpvarFloatAll(string, string, string, float)\n Sets an opvar value for all players",
    "DebugDrawSphere" : "void DebugDrawSphere(Vector, Vector, float, float, bool, float)\n Draw a debug sphere (center, vRgb, a, rad, ztest, duration)",
    "HeroList" : 
    {
    },
    "ParticleManager" : 
    {
    },
    "rawset" : "No description",
    "Warning" : "void Warning(string)\n Print a warning",
    "ShowCustomHeaderMessage" : "void ShowCustomHeaderMessage(string, int, int, float)\n ( const char *pszMessage, int nPlayerID, int nValue, float flTime ) - Supports localized strings - %s1 = PlayerName, %s2 = Value, %s3 = TeamName",
    "ShowGenericPopupToPlayer" : "void ShowGenericPopupToPlayer(handle, string, string, string, string, int)\n Show a generic popup dialog to a specific player.",
    "ApplyDamage" : "float ApplyDamage(handle)\n Damage an npc.",
    "PlayerInstanceFromIndex" : "handle PlayerInstanceFromIndex(int)\n Get a script instance of a player by index.",
    "DebugScreenTextPretty" : "void DebugScreenTextPretty(float, float, int, string, int, int, int, int, float, string, int, bool)\n Draw pretty debug text (x, y, lineOffset, text, r, g, b, a, duration, font, size, bBold)",
    "Time" : "float Time()\n Get the current server time",
    "TraceCollideable" : "bool TraceCollideable(handle)\n Pass table - Inputs: start, end, ent, (optional mins, maxs) -- outputs: pos, fraction, hit, startsolid, normal",
    "pcall" : "No description",
    "LoadKeyValues" : "table LoadKeyValues(string)\n Creates a table from the specified keyvalues text file",
    "ShowMessage" : "void ShowMessage(string)\n Print a hud message on all clients",
    "CreateItemOnPositionSync" : "handle CreateItemOnPositionSync(Vector, handle)\n Create a physical item at a given location",
    "FireEntityIOInputVec" : "void FireEntityIOInputVec(ehandle, string, Vector)\n Fire Entity's Action Input with passed Vector - you own the memory",
    "_deepprint_alreadyseen" : 
    {
        "1" : "No description"
    },
    "EndScriptDebug" : "No description",
    "instanceof" : "No description",
    "doneObjs" : 
    {
    },
    "collectgarbage" : "No description",
    "GetTeamName" : "string GetTeamName(int)\n ( int teamID )",
    "IsValidEntity" : "bool IsValidEntity(handle)\n Checks to see if the given hScript is a valid entity",
    "module" : "No description",
    "cvar_setf" : "bool cvar_setf(string, float)\n Sets the value of the given cvar, as a float.",
    "__DumpScope" : "No description",
    "InstallMixins" : "No description",
    "UTIL_ResetMessageText" : "void UTIL_ResetMessageText(int)\n Clear all message text on one client.",
    "DebugDrawCircle" : "void DebugDrawCircle(Vector, Vector, float, float, bool, float)\n Draw a debug circle (center, vRgb, a, rad, ztest, duration)",
    "VectorIsZero" : "No description",
    "DebugDrawLine" : "void DebugDrawLine(Vector, Vector, int, int, int, bool, float)\n Draw a debug overlay line (origin, target, r, g, b, ztest, duration)",
    "GetGoldFrostyPointsForRound" : "int GetGoldFrostyPointsForRound(int, int, int)\n ",
    "dofile" : "No description",
    "newproxy" : "No description",
    "TraceLine" : "bool TraceLine(handle)\n Pass table - Inputs: startpos, endpos, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid",
    "InitLogFile" : "void InitLogFile(string, string)\n If the given file doesn't exist, creates it with the given contents; does nothing if it exists",
    "MakeStringToken" : "int MakeStringToken(string)\n Checks to see if the given hScript is a valid entity",
    "CancelEntityIOEvents" : "void CancelEntityIOEvents(ehandle)\n Create all I/O events for a particular entity",
    "DebugDrawLine_vCol" : "void DebugDrawLine_vCol(Vector, Vector, Vector, bool, float)\n Draw a debug line using color vec (start, end, vRgb, a, ztest, duration)",
    "FireEntityIOInputString" : "void FireEntityIOInputString(ehandle, string, string)\n Fire Entity's Action Input with passed String - you own the memory",
    "GetWorldMaxX" : "float GetWorldMaxX()\n Gets the world's maximum X position.",
    "UpdateEventPoints" : "void UpdateEventPoints(handle)\n ",
    "SendFrostivusTimeElapsedToGC" : "void SendFrostivusTimeElapsedToGC()\n ",
    "GetGoldFrostyBoostAmount" : "float GetGoldFrostyBoostAmount(int, int)\n ",
    "GetFrostyBoostAmount" : "float GetFrostyBoostAmount(int, int)\n ",
    "GetFrostyPointsForRound" : "int GetFrostyPointsForRound(int, int, int)\n ",
    "GetGroundPosition" : "Vector GetGroundPosition(Vector, handle)\n Returns the supplied position moved to the ground. Second parameter is an NPC for measuring movement collision hull offset.",
    "FindUnitsInRadius" : "table FindUnitsInRadius(int, Vector, handle, float, int, int, int, int, bool)\n Finds the units in a given radius with the given flags.",
    "FindClearSpaceForUnit" : "void FindClearSpaceForUnit(handle, Vector, bool)\n Place a unit somewhere not already occupied.",
    "CreateItem" : "handle CreateItem(string, handle, handle)\n Create a DOTA item",
    "PrecacheItemByNameSync" : "void PrecacheItemByNameSync(string, handle)\n Precaches a DOTA item by its dota_npc_items.txt name",
    "PrecacheUnitByNameAsync" : "void PrecacheUnitByNameAsync(string, handle)\n Asynchronously precaches a DOTA unit by its dota_npc_units.txt name, provides a callback when it's finished.",
    "PrecacheUnitByNameSync" : "void PrecacheUnitByNameSync(string, handle)\n Precaches a DOTA unit by its dota_npc_units.txt name",
    "CreateUnitByName" : "handle CreateUnitByName(string, Vector, bool, handle, handle, int)\n Creates a DOTA unit by its dota_npc_units.txt name",
    "EmitGlobalSound" : "void EmitGlobalSound(string)\n Play named sound for all players",
    "DebugDrawClear" : "void DebugDrawClear()\n Try to clear all the debug overlay info",
    "GetSystemTime" : "string GetSystemTime()\n Get the current real world time",
    "GetWorldMaxY" : "float GetWorldMaxY()\n Gets the world's maximum Y position.",
    "GetWorldMinY" : "float GetWorldMinY()\n Gets the world's minimum Y position.",
    "GetWorldMinX" : "float GetWorldMinX()\n Gets the world's minimum X position.",
    "DebugDrawScreenTextLine" : "void DebugDrawScreenTextLine(float, float, int, string, int, int, int, int, float)\n Draw text with a line offset (x, y, lineOffset, text, r, g, b, a, duration)",
    "GetMaxOutputDelay" : "float GetMaxOutputDelay(ehandle, string)\n Get the longest delay for all events attached to an output",
    "Convars" : 
    {
    },
    "rr_GetResponseTargets" : "handle rr_GetResponseTargets()\n Retrieve a table of all available expresser targets, in the form { name : handle, name: handle }.",
    "IsServer" : "bool IsServer()\n Returns true if this is lua running from the server.dll.",
    "ScriptDebugAddWatches" : "No description",
    "UTIL_MessageText" : "void UTIL_MessageText(int, string, int, int, int, int)\n Sends colored text to one client.",
    "UTIL_MessageTextAll" : "void UTIL_MessageTextAll(string, int, int, int, int)\n Sends colored text to all clients.",
    "CreateTriggerRadiusApproximate" : "handle CreateTriggerRadiusApproximate(Vector, float)\n CreateTriggerRadiusApproximate( vecOrigin, flRadius ) : Creates and returns an AABB trigger thats bigger than the radius provided",
    "PrecacheModel" : "void PrecacheModel(string, handle)\n ( modelName, context ) - Manually precache a single model",
    "UnloadSpawnGroup" : "void UnloadSpawnGroup(string)\n Unload a spawn group by name",
    "TraceHull" : "bool TraceHull(handle)\n Pass table - Inputs: start, end, min, max, mask, ignore  -- outputs: pos, fraction, hit, enthit, startsolid",
    "StopEffect" : "void StopEffect(handle, string)\n Pass entity and effect name",
    "StartSoundEventFromPosition" : "void StartSoundEventFromPosition(string, Vector)\n Start a sound event from position",
    "QAngle" : "No description",
    "RegisterSpawnGroupFilterProxy" : "void RegisterSpawnGroupFilterProxy(string)\n Create a C proxy for a script-based spawn group filter",
    "ScriptDebugDrawWatches" : "No description",
    "AppendToLogFile" : "void AppendToLogFile(string, string)\n Appends a string to a log file on the server",
    "DebugDrawBoxDirection" : "void DebugDrawBoxDirection(Vector, Vector, Vector, Vector, Vector, float, float)\n Draw a debug forward box (cent, min, max, forward, vRgb, a, duration)",
    "EntityFramework" : 
    {
        "PrecacheResource" : "No description",
        "DispatchPrecache" : "No description",
        "DispatchSpawn" : "No description",
        "GetNativeOutputsForClass" : "No description",
        "IsKeyValueUsed" : "No description",
        "GetNativeClassForDesignerName" : "No description",
        "AddClassToGameData" : "No description",
        "GetDesignerNameForScriptClass" : "No description",
        "UnserializeForPrecache" : "No description",
        "GetEntityHandle" : "No description",
        "CreateEntity" : "No description",
        "CreateCppClassProxy" : "No description",
        "InstallClass_BuildCompleteSpecification" : "No description",
        "InstallClassMixinKeysToIgnore" : 
        {
        },
        "InstallClassVisits" : 
        {
        },
        "InstallClasses" : "No description",
        "CreateScriptProxyClass" : "No description",
        "InstallClass_Publish" : "No description",
        "LoadEntityClasses" : "No description",
        "DispatchUpdateOnRemove" : "No description",
        "DispatchInput" : "No description",
        "InstallClass" : "No description",
        "InputValueConverters" : 
        {
            "number" : "No description",
            "string" : "No description",
            "float" : "No description",
            "integer" : "No description"
        },
        "InstallClass_HandleEntityIO" : "No description",
        "InstallClassMixinKeysToMakeUnique" : 
        {
        },
        "GetScriptClassForDesignerName" : "No description",
        "GetNativeClassForScriptClass" : "No description",
        "GetInputsForScriptClass" : "No description",
        "InstallClass_MergeSpecifications" : "No description",
        "UnserializeForSpawn" : "No description",
        "DispatchActivate" : "No description",
        "CreateCppLinkClassProxyInstance" : "No description",
        "GetClassNameOverride" : "No description"
    },
    "StopSoundEvent" : "void StopSoundEvent(string, handle)\n Stops a sound event",
    "TimeOfDay" : 
    {
        "IsDay" : "No description",
        "Float" : "No description",
        "GetEntity" : "No description",
        "IsNight" : "No description",
        "NightProgress" : "No description"
    },
    "LoadKeyValuesFromString" : "table LoadKeyValuesFromString(string)\n Creates a table from the specified keyvalues string",
    "tostring" : "No description",
    "SetOpvarFloatPlayer" : "void SetOpvarFloatPlayer(string, string, string, float, handle)\n Sets an opvar value for a single player",
    "StopSoundOn" : "void StopSoundOn(string, handle)\n Stop named sound on Entity",
    "AngleDiff" : "float AngleDiff(float, float)\n Returns the number of degrees difference between two yaw angles",
    "RotatePosition" : "Vector RotatePosition(Vector, QAngle, Vector)\n Rotate a Vector around a point.",
    "PrecacheEntityListFromTable" : "void PrecacheEntityListFromTable(handle, handle)\n Precache a list of entity KeyValues tables",
    "PrecacheEntityFromTable" : "void PrecacheEntityFromTable(string, handle, handle)\n Precache an entity from KeyValues in table",
    "gcinfo" : "No description",
    "SpawnEntityFromTableSynchronous" : "handle SpawnEntityFromTableSynchronous(string, handle)\n Synchronously spawns a single entity from a table",
    "ScreenShake" : "void ScreenShake(Vector, float, float, float, float, int, bool)\n Start a screenshake with the following parameters. vecCenter, flAmplitude, flFrequency, flDuration, flRadius, eCommand( SHAKE_START = 0, SHAKE_STOP = 1 ), bAirShake",
    "DoScriptAssert" : "void DoScriptAssert(bool, string)\n #ScriptAssert:Asserts the passed in value. Prints out a message and brings up the assert dialog.",
    "EntIndexToHScript" : "handle EntIndexToHScript(int)\n Turn an entity index integer to an HScript representing that entity's script instance.",
    "StopListeningToGameEvent" : "bool StopListeningToGameEvent(int)\n Stop listening to a particular game event.",
    "ListenToGameEvent" : "int ListenToGameEvent(string, handle, handle)\n Register as a listener for a game event from script.",
    "DoEntFireByInstanceHandle" : "void DoEntFireByInstanceHandle(handle, string, string, float, handle, handle)\n #EntFireByHandle:Generate and entity i/o event",
    "DoEntFire" : "void DoEntFire(string, string, string, float, handle, handle)\n #EntFire:Generate and entity i/o event",
    "UTIL_Remove" : "void UTIL_Remove(handle)\n Removes the specified entity",
    "ExponentialDecay" : "float ExponentialDecay(float, float, float)\n Smooth curve decreasing slower as it approaches zero",
    "GetListenServerHost" : "handle GetListenServerHost()\n Get the local player on a listen server.",
    "SetQuestPhase" : "void SetQuestPhase(int)\n Set the current quest phase.",
    "SetRenderingEnabled" : "void SetRenderingEnabled(ehandle, bool)\n Set rendering on/off for an ehandle",
    "SplineVectors" : "Vector SplineVectors(Vector, Vector, float)\n (vector,vector,float) very basic interpolation of v0 to v1 over t on [0,1]",
    "CreateUnitByNameAsync" : "int CreateUnitByNameAsync(string, Vector, bool, handle, handle, int, handle)\n Creates a DOTA unit by its dota_npc_units.txt name",
    "select" : "No description",
    "_DeepToString" : "No description",
    "AxisAngleToQuaternion" : "Quaternion AxisAngleToQuaternion(Vector, float)\n (vector,float) constructs a quaternion representing a rotation by angle around the specified vector axis",
    "EmitSoundOn" : "void EmitSoundOn(string, handle)\n Play named sound on Entity",
    "CreateUnitFromTable" : "handle CreateUnitFromTable(handle, Vector)\n Creates a DOTA unit by its dota_npc_units.txt name from a table of entity key values and a position to spawn at.",
    "Vector" : "No description",
    "DebugBreak" : "void DebugBreak()\n Breaks in the debugger",
    "DoIncludeScript" : "bool DoIncludeScript(string, handle)\n Execute a script (internal)",
    "SetQuestName" : "void SetQuestName(string)\n Set the current quest name.",
    "Entities" : 
    {
    },
    "GetFrameCount" : "int GetFrameCount()\n Returns the engines current frame count",
    "CreateHeroForPlayer" : "handle CreateHeroForPlayer(string, handle)\n Creates a DOTA hero by its dota_npc_units.txt name and sets it as the given player's controlled hero",
    "FireEntityIOInputNameOnly" : "void FireEntityIOInputNameOnly(ehandle, string)\n Fire Entity's Action Input w/no data",
    "SpawnEntityListFromTableSynchronous" : "handle SpawnEntityListFromTableSynchronous(handle)\n Synchronously spawn an entity group from a list of spawn tables.",
    "ScriptDebugText" : 
    {
    },
    "error" : "No description",
    "getmetatable" : "No description",
    "StopListeningToAllGameEvents" : "void StopListeningToAllGameEvents(handle)\n Stop listening to all game events within a specific context.",
    "SpawnEntityGroupFromTable" : "bool SpawnEntityGroupFromTable(handle, bool, handle)\n Hierarchically spawn an entity group from a set of spawn tables.",
    "DeepPrintTable" : "No description",
    "RollPercentage" : "bool RollPercentage(int)\n Rolls a number from 1 to 100 and returns true if the roll is less than or equal to the number specified",
    "load" : "No description",
    "IsMarkedForDeletion" : "bool IsMarkedForDeletion(handle)\n Returns true if the entity is valid and marked for deletion.",
    "GetMapName" : "string GetMapName()\n Get the name of the map.",
    "RotateQuaternionByAxisAngle" : "Quaternion RotateQuaternionByAxisAngle(Quaternion, Vector, float)\n (quaternion,vector,float) rotates a quaternion by the specified angle around the specified vector axis",
    "ReloadMOTD" : "void ReloadMOTD()\n Reloads the MotD file",
    "DebugDrawBox" : "void DebugDrawBox(Vector, Vector, Vector, int, int, int, int, float)\n Draw a debug overlay box (origin, mins, maxs, forward, r, g, b, a, duration )",
    "ScriptDebugDraw" : "No description",
    "SendToServerConsole" : "void SendToServerConsole(string)\n Send a string to the console as a server command",
    "UTIL_MessageText_WithContext" : "void UTIL_MessageText_WithContext(int, string, int, int, int, int, handle)\n Sends colored text to one client. (Valid context keys: player_id, value, team_id)",
    "CreateTrigger" : "handle CreateTrigger(Vector, Vector, Vector)\n CreateTrigger( vecMin, vecMax ) : Creates and returns an AABB trigger",
    "xpcall" : "No description",
    "getfenv" : "No description",
    "rr_QueryBestResponse" : "bool rr_QueryBestResponse(handle, handle, handle)\n Params: (entity, query) : tests 'query' against entity's response system and returns the best response found (or null if none found).",
    "require" : "No description",
    "setmetatable" : "No description",
    "PrecacheItemByNameAsync" : "void PrecacheItemByNameAsync(string, handle)\n Asynchronously precaches a DOTA item by its dota_npc_items.txt name, provides a callback when it's finished.",
    "rr_AddDecisionRule" : "bool rr_AddDecisionRule(handle)\n Add a rule to the decision database.",
    "rr_CommitAIResponse" : "bool rr_CommitAIResponse(handle, handle)\n Commit the result of QueryBestResponse back to the given entity to play. Call with params (entity, airesponse)",
    "g_SpawnGroupEntityFilters" : 
    {
    },
    "VoteSystem" : 
    {
    },
    "PrintLinkedConsoleMessage" : "void PrintLinkedConsoleMessage(string, string)\n Print a console message with a linked console command",
    "ScriptDebugRemoveTextFilter" : "No description",
    "EntityDesignerNameToClassname" : 
    {
    },
    "loadstring" : "No description",
    "UTIL_RemoveImmediate" : "void UTIL_RemoveImmediate(handle)\n Immediately removes the specified entity",
    "FilterSpawnGroupEntities" : "No description",
    "SplineQuaternions" : "Quaternion SplineQuaternions(Quaternion, Quaternion, float)\n (quaternion,quaternion,float) very basic interpolation of v0 to v1 over t on [0,1]",
    "Msg" : "void Msg(string)\n Print a message",
    "DumpScriptBindings" : "No description",
    "ShowGenericPopup" : "void ShowGenericPopup(string, string, string, string, int)\n Show a generic popup dialog for all players.",
    "GetSystemDate" : "string GetSystemDate()\n Get the current real world date",
    "GetPhysAngularVelocity" : "Vector GetPhysAngularVelocity(handle)\n Get Angular Velocity for VPHYS or normal object",
    "print" : "No description",
    "ipairs" : "No description",
    "StartSoundEvent" : "void StartSoundEvent(string, handle)\n Start a sound event",
    "RandomFloat" : "float RandomFloat(float, float)\n Get a random float within a range",
    "FireGameEventLocal" : "void FireGameEventLocal(string, handle)\n Fire a game event without broadcasting to the client.",
    "EntityClasses" : 
    {
        "CEntityInstance" : 
        {
            "describe_R" : "No description",
            "__initprops__" : 
            {
            },
            "inspect" : "No description",
            "__getbase__" : "No description",
            "__getclass__" : "No description",
            "__instanceof__" : "No description",
            "constructor" : "No description",
            "Specification" : 
            {
            }
        }
    },
    "GetSpawnGroupEntityFilterFunc" : "No description",
    "abs" : "No description",
    "setfenv" : "No description",
    "RotateOrientation" : "QAngle RotateOrientation(QAngle, QAngle)\n Rotate a QAngle by another QAngle."
}